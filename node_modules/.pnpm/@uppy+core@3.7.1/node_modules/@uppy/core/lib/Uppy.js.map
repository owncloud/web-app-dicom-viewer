{"version":3,"names":["Translator","ee","nanoid","throttle","DefaultStore","getFileType","getFileNameAndExtension","getSafeFileId","supportsUploadProgress","getFileName","justErrorsLogger","debugLogger","Restricter","defaultOptions","defaultRestrictionOptions","RestrictionError","packageJson","locale","getDefaultUploadState","totalProgress","allowNewUpload","error","recoveredState","_plugins","_classPrivateFieldLooseKey","_restricter","_storeUnsubscribe","_emitter","_preProcessors","_uploaders","_postProcessors","_informAndEmit","_checkRequiredMetaFieldsOnFile","_checkRequiredMetaFields","_assertNewUploadAllowed","_transformFile","_startIfAutoProceed","_checkAndUpdateFileState","_addListeners","_updateOnlineStatus","_createUpload","_getUpload","_removeUpload","_runUpload","_Symbol$for","Symbol","for","_Symbol$for2","Uppy","constructor","opts","Object","defineProperty","value","_runUpload2","_removeUpload2","_getUpload2","_createUpload2","_addListeners2","_checkAndUpdateFileState2","_startIfAutoProceed2","_transformFile2","_assertNewUploadAllowed2","_checkRequiredMetaFields2","_checkRequiredMetaFieldsOnFile2","_informAndEmit2","writable","create","Set","calculateProgress","file","data","fileInState","getFile","id","log","progress","percentage","canHavePercentage","Number","isFinite","bytesTotal","setFileState","bytesUploaded","Math","round","calculateTotalProgress","leading","trailing","updateOnlineStatus","bind","defaultLocale","autoProceed","allowMultipleUploadBatches","debug","restrictions","meta","onBeforeFileAdded","files","hasOwn","onBeforeUpload","store","logger","infoTimeout","VERSION","i18nInit","setState","plugins","currentUploads","capabilities","uploadProgress","individualCancellation","resumableUploads","info","_classPrivateFieldLooseBase","i18n","subscribe","prevState","nextState","patch","emit","updateAll","window","event","_len","arguments","length","args","Array","_key","on","callback","once","off","state","iteratePlugins","plugin","update","getState","patchFilesState","filesWithNewState","existingFilesState","fromEntries","entries","map","_ref","fileID","newFileState","Error","translator","translate","i18nArray","translateArray","setOptions","newOpts","setMeta","resetProgress","defaultProgress","uploadComplete","uploadStarted","updatedFiles","keys","forEach","clearUploadedFiles","addPreProcessor","fn","add","removePreProcessor","delete","addPostProcessor","removePostProcessor","addUploader","removeUploader","updatedMeta","setFileMeta","newMeta","getFiles","values","getFilesByIds","ids","getObjectOfFilesPerState","filesObject","inProgressFiles","filter","_ref2","newFiles","startedFiles","preprocess","postprocess","uploadStartedFiles","pausedFiles","isPaused","completeFiles","erroredFiles","inProgressNotPausedFiles","processingFiles","isUploadStarted","isAllComplete","isAllErrored","isAllPaused","isUploadInProgress","isSomeGhost","some","isGhost","validateRestrictions","validate","err","checkIfFileAlreadyExists","addFile","nextFilesState","validFilesToAdd","errors","restrictionErrors","isRestriction","firstValidFileToAdd","name","type","addFiles","fileDescriptors","nonRestrictionErrors","message","subError","smart_count","details","AggregateError","removeFiles","fileIDs","reason","updatedUploads","removedFiles","fileIsNotRemoved","uploadFileID","undefined","uploadID","newFileIDs","stateUpdate","removedFileIDs","join","removeFile","pauseResume","wasPaused","pauseAll","inProgressUpdatedFiles","updatedFile","resumeAll","retryAll","filesToRetry","Promise","resolve","successful","failed","forceAllowNewUpload","cancelAll","_temp","retryUpload","logout","provider","inProgress","sizedFiles","unsizedFiles","progressMax","currentProgress","reduce","acc","totalSize","averageSize","uploadedSize","online","navigator","onLine","wasOffline","getID","use","Plugin","msg","TypeError","pluginId","existsPluginAlready","getPlugin","push","install","foundPlugin","find","method","flat","removePlugin","instance","uninstall","list","index","findIndex","item","splice","updatedState","close","_temp2","removeEventListener","hideInfo","slice","duration","isComplexMessage","setTimeout","warn","restore","reject","addResultData","currentUpload","result","upload","_classPrivateFieldLoo","uploader","onBeforeUploadResult","then","validateMinNumberOfFiles","catch","currentlyUploadingFiles","flatMap","curr","waitingFileIDs","indexOf","userFacingErrors","isUserFacing","maxNumToShow","firstErrors","additionalErrors","_ref3","count","missingFields","getMissingRequiredMetaFields","missingRequiredMetaFields","success","fileDescriptorOrFile","fileDescriptor","File","size","fileType","fileName","fileExtension","extension","isRemote","Boolean","source","remote","preview","scheduledAutoProceed","stack","filesToAdd","existingFiles","fileToAdd","_existingFiles$newFil","newFile","existingFileState","onBeforeFileAddedResult","validateSingleFile","validateAggregateRestrictions","errorHandler","response","errorMsg","newError","uploadStalledWarningRecentlyEmitted","trim","onUploadStarted","filesFiltered","exists","filesState","Date","now","uploadResp","mode","uploadURL","addEventListener","allowMultipleUploads","step","getCurrentUpload","steps","version"],"sources":["Uppy.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n/* global AggregateError */\n\nimport Translator from '@uppy/utils/lib/Translator'\nimport ee from 'namespace-emitter'\nimport { nanoid } from 'nanoid/non-secure'\nimport throttle from 'lodash/throttle.js'\nimport DefaultStore from '@uppy/store-default'\nimport getFileType from '@uppy/utils/lib/getFileType'\nimport getFileNameAndExtension from '@uppy/utils/lib/getFileNameAndExtension'\nimport { getSafeFileId } from '@uppy/utils/lib/generateFileID'\nimport supportsUploadProgress from './supportsUploadProgress.js'\nimport getFileName from './getFileName.js'\nimport { justErrorsLogger, debugLogger } from './loggers.js'\nimport {\n  Restricter,\n  defaultOptions as defaultRestrictionOptions,\n  RestrictionError,\n} from './Restricter.js'\n\nimport packageJson from '../package.json'\nimport locale from './locale.js'\n\n\nconst getDefaultUploadState = () => ({\n  totalProgress: 0,\n  allowNewUpload: true,\n  error: null,\n  recoveredState: null,\n});\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nclass Uppy {\n  static VERSION = packageJson.version\n\n  /** @type {Record<string, BasePlugin[]>} */\n  #plugins = Object.create(null)\n\n  #restricter\n\n  #storeUnsubscribe\n\n  #emitter = ee()\n\n  #preProcessors = new Set()\n\n  #uploaders = new Set()\n\n  #postProcessors = new Set()\n\n  /**\n   * Instantiate Uppy\n   *\n   * @param {object} opts — Uppy options\n   */\n  constructor (opts) {\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: false,\n      allowMultipleUploadBatches: true,\n      debug: false,\n      restrictions: defaultRestrictionOptions,\n      meta: {},\n      onBeforeFileAdded: (file, files) => !Object.hasOwn(files, file.id),\n      onBeforeUpload: (files) => files,\n      store: new DefaultStore(),\n      logger: justErrorsLogger,\n      infoTimeout: 5000,\n    }\n\n    // Merge default options with the ones set by user,\n    // making sure to merge restrictions too\n    this.opts = {\n      ...defaultOptions,\n      ...opts,\n      restrictions: {\n        ...defaultOptions.restrictions,\n        ...(opts && opts.restrictions),\n      },\n    }\n\n    // Support debug: true for backwards-compatability, unless logger is set in opts\n    // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions\n    if (opts && opts.logger && opts.debug) {\n      this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning')\n    } else if (opts && opts.debug) {\n      this.opts.logger = debugLogger\n    }\n\n    this.log(`Using Core v${this.constructor.VERSION}`)\n\n    this.i18nInit()\n\n    this.store = this.opts.store\n    this.setState({\n      ...getDefaultUploadState(),\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        uploadProgress: supportsUploadProgress(),\n        individualCancellation: true,\n        resumableUploads: false,\n      },\n      meta: { ...this.opts.meta },\n      info: [],\n    })\n\n    this.#restricter = new Restricter(() => this.opts, this.i18n)\n\n    this.#storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // Exposing uppy object on window for debugging and testing\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window[this.opts.id] = this\n    }\n\n    this.#addListeners()\n  }\n\n  emit (event, ...args) {\n    this.#emitter.emit(event, ...args)\n  }\n\n  on (event, callback) {\n    this.#emitter.on(event, callback)\n    return this\n  }\n\n  once (event, callback) {\n    this.#emitter.once(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.#emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   *\n   * @returns {object}\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  patchFilesState (filesWithNewState) {\n    const existingFilesState = this.getState().files\n\n    this.setState({\n      files: {\n        ...existingFilesState,\n        ...Object.fromEntries(Object.entries(filesWithNewState).map(([fileID, newFileState]) => ([\n          fileID,\n          {\n            ...existingFilesState[fileID],\n            ...newFileState,\n          },\n        ]))),\n      },\n    })\n  }\n\n  /**\n   * Shorthand to set state for a specific file.\n   */\n  setFileState (fileID, state) {\n    if (!this.getState().files[fileID]) {\n      throw new Error(`Can’t set state for ${fileID} (the file could have been removed)`)\n    }\n\n    this.patchFilesState({ [fileID]: state })\n  }\n\n  i18nInit () {\n    const translator = new Translator([this.defaultLocale, this.opts.locale])\n    this.i18n = translator.translate.bind(translator)\n    this.i18nArray = translator.translateArray.bind(translator)\n    this.locale = translator.locale\n  }\n\n  setOptions (newOpts) {\n    this.opts = {\n      ...this.opts,\n      ...newOpts,\n      restrictions: {\n        ...this.opts.restrictions,\n        ...(newOpts && newOpts.restrictions),\n      },\n    }\n\n    if (newOpts.meta) {\n      this.setMeta(newOpts.meta)\n    }\n\n    this.i18nInit()\n\n    if (newOpts.locale) {\n      this.iteratePlugins((plugin) => {\n        plugin.setOptions(newOpts)\n      })\n    }\n\n    // Note: this is not the preact `setState`, it's an internal function that has the same name.\n    this.setState() // so that UI re-renders with new options\n  }\n\n  // todo next major: rename to something better? (it doesn't just reset progress)\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: null,\n    }\n    const files = { ...this.getState().files }\n    const updatedFiles = {}\n\n    Object.keys(files).forEach(fileID => {\n      updatedFiles[fileID] = {\n        ...files[fileID],\n        progress: {\n          ...files[fileID].progress, ...defaultProgress,\n        },\n      }\n    })\n\n    this.setState({ files: updatedFiles, ...getDefaultUploadState() })\n\n    this.emit('reset-progress')\n  }\n\n  /** @protected */\n  clearUploadedFiles () {\n    this.setState({ ...getDefaultUploadState(), files: {} })\n  }\n\n  addPreProcessor (fn) {\n    this.#preProcessors.add(fn)\n  }\n\n  removePreProcessor (fn) {\n    return this.#preProcessors.delete(fn)\n  }\n\n  addPostProcessor (fn) {\n    this.#postProcessors.add(fn)\n  }\n\n  removePostProcessor (fn) {\n    return this.#postProcessors.delete(fn)\n  }\n\n  addUploader (fn) {\n    this.#uploaders.add(fn)\n  }\n\n  removeUploader (fn) {\n    return this.#uploaders.delete(fn)\n  }\n\n  setMeta (data) {\n    const updatedMeta = { ...this.getState().meta, ...data }\n    const updatedFiles = { ...this.getState().files }\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = { ...updatedFiles[fileID], meta: { ...updatedFiles[fileID].meta, ...data } }\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles,\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = { ...this.getState().files }\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that has been removed: ', fileID)\n      return\n    }\n    const newMeta = { ...updatedFiles[fileID].meta, ...data }\n    updatedFiles[fileID] = { ...updatedFiles[fileID], meta: newMeta }\n    this.setState({ files: updatedFiles })\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles () {\n    const { files } = this.getState()\n    return Object.values(files)\n  }\n\n  getFilesByIds (ids) {\n    return ids.map((id) => this.getFile(id))\n  }\n\n  getObjectOfFilesPerState () {\n    const { files: filesObject, totalProgress, error } = this.getState()\n    const files = Object.values(filesObject)\n    const inProgressFiles = files.filter(({ progress }) => !progress.uploadComplete && progress.uploadStarted)\n    const newFiles =  files.filter((file) => !file.progress.uploadStarted)\n    const startedFiles = files.filter(\n      file => file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess,\n    )\n    const uploadStartedFiles = files.filter((file) => file.progress.uploadStarted)\n    const pausedFiles = files.filter((file) => file.isPaused)\n    const completeFiles = files.filter((file) => file.progress.uploadComplete)\n    const erroredFiles = files.filter((file) => file.error)\n    const inProgressNotPausedFiles = inProgressFiles.filter((file) => !file.isPaused)\n    const processingFiles = files.filter((file) => file.progress.preprocess || file.progress.postprocess)\n\n    return {\n      newFiles,\n      startedFiles,\n      uploadStartedFiles,\n      pausedFiles,\n      completeFiles,\n      erroredFiles,\n      inProgressFiles,\n      inProgressNotPausedFiles,\n      processingFiles,\n\n      isUploadStarted: uploadStartedFiles.length > 0,\n      isAllComplete: totalProgress === 100\n        && completeFiles.length === files.length\n        && processingFiles.length === 0,\n      isAllErrored: !!error && erroredFiles.length === files.length,\n      isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,\n      isUploadInProgress: inProgressFiles.length > 0,\n      isSomeGhost: files.some(file => file.isGhost),\n    }\n  }\n\n  /*\n  * @constructs\n  * @param { Error[] } errors\n  * @param { undefined } file\n  */\n  /*\n  * @constructs\n  * @param { RestrictionError } error\n  */\n  #informAndEmit (errors) {\n    for (const error of errors) {\n      const { file, isRestriction } = error\n\n      if (isRestriction) {\n        this.emit('restriction-failed', file, error)\n      } else {\n        this.emit('error', error)\n      }\n      this.log(error, 'warning')\n    }\n\n    const userFacingErrors = errors.filter((error) => error.isUserFacing)\n\n    // don't flood the user: only show the first 4 toasts\n    const maxNumToShow = 4\n    const firstErrors = userFacingErrors.slice(0, maxNumToShow)\n    const additionalErrors = userFacingErrors.slice(maxNumToShow)\n    firstErrors.forEach(({ message, details = '' }) => {\n      this.info({ message, details }, 'error', this.opts.infoTimeout)\n    })\n\n    if (additionalErrors.length > 0) {\n      this.info({ message: this.i18n('additionalRestrictionsFailed', { count: additionalErrors.length }) })\n    }\n  }\n\n  validateRestrictions (file, files = this.getFiles()) {\n    try {\n      this.#restricter.validate(files, [file])\n    } catch (err) {\n      return err\n    }\n    return null\n  }\n\n  #checkRequiredMetaFieldsOnFile (file) {\n    const { missingFields, error } = this.#restricter.getMissingRequiredMetaFields(file)\n\n    if (missingFields.length > 0) {\n      this.setFileState(file.id, { missingRequiredMetaFields: missingFields })\n      this.log(error.message)\n      this.emit('restriction-failed', file, error)\n      return false\n    }\n    return true\n  }\n\n  #checkRequiredMetaFields (files) {\n    let success = true\n    for (const file of Object.values(files)) {\n      if (!this.#checkRequiredMetaFieldsOnFile(file)) {\n        success = false\n      }\n    }\n    return success\n  }\n\n  #assertNewUploadAllowed (file) {\n    const { allowNewUpload } = this.getState()\n\n    if (allowNewUpload === false) {\n      const error = new RestrictionError(this.i18n('noMoreFilesAllowed'), { file })\n      this.#informAndEmit([error])\n      throw error\n    }\n  }\n\n  checkIfFileAlreadyExists (fileID) {\n    const { files } = this.getState()\n\n    if (files[fileID] && !files[fileID].isGhost) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Create a file state object based on user-provided `addFile()` options.\n   */\n  #transformFile (fileDescriptorOrFile) {\n    // Uppy expects files in { name, type, size, data } format.\n    // If the actual File object is passed from input[type=file] or drag-drop,\n    // we normalize it to match Uppy file object\n    const fileDescriptor = fileDescriptorOrFile instanceof File ? {\n      name: fileDescriptorOrFile.name,\n      type: fileDescriptorOrFile.type,\n      size: fileDescriptorOrFile.size,\n      data: fileDescriptorOrFile,\n    } : fileDescriptorOrFile\n\n    const fileType = getFileType(fileDescriptor)\n    const fileName = getFileName(fileType, fileDescriptor)\n    const fileExtension = getFileNameAndExtension(fileName).extension\n    const isRemote = Boolean(fileDescriptor.isRemote)\n    const id = getSafeFileId(fileDescriptor)\n\n    const meta = fileDescriptor.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    // `null` means the size is unknown.\n    const size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null\n\n    return {\n      source: fileDescriptor.source || '',\n      id,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: {\n        ...this.getState().meta,\n        ...meta,\n      },\n      type: fileType,\n      data: fileDescriptor.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: size,\n        uploadComplete: false,\n        uploadStarted: null,\n      },\n      size,\n      isRemote,\n      remote: fileDescriptor.remote || '',\n      preview: fileDescriptor.preview,\n    }\n  }\n\n  // Schedule an upload if `autoProceed` is enabled.\n  #startIfAutoProceed () {\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          if (!err.isRestriction) {\n            this.log(err.stack || err.message || err)\n          }\n        })\n      }, 4)\n    }\n  }\n\n  #checkAndUpdateFileState (filesToAdd) {\n    const { files: existingFiles } = this.getState()\n\n    // create a copy of the files object only once\n    const nextFilesState = { ...existingFiles }\n    const validFilesToAdd = []\n    const errors = []\n\n    for (const fileToAdd of filesToAdd) {\n      try {\n        let newFile = this.#transformFile(fileToAdd)\n\n        // If a file has been recovered (Golden Retriever), but we were unable to recover its data (probably too large),\n        // users are asked to re-select these half-recovered files and then this method will be called again.\n        // In order to keep the progress, meta and everthing else, we keep the existing file,\n        // but we replace `data`, and we remove `isGhost`, because the file is no longer a ghost now\n        if (existingFiles[newFile.id]?.isGhost) {\n          const { isGhost, ...existingFileState } = existingFiles[newFile.id]\n          newFile = {\n            ...existingFileState,\n            data: fileToAdd.data,\n          }\n          this.log(`Replaced the blob in the restored ghost file: ${newFile.name}, ${newFile.id}`)\n        }\n\n        const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, nextFilesState)\n\n        if (!onBeforeFileAddedResult && this.checkIfFileAlreadyExists(newFile.id)) {\n          throw new RestrictionError(this.i18n('noDuplicates', { fileName: newFile.name }), { file: fileToAdd })\n        }\n\n        if (onBeforeFileAddedResult === false) {\n          // Don’t show UI info for this error, as it should be done by the developer\n          throw new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.', { isUserFacing: false, file: fileToAdd })\n        } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {\n          newFile = onBeforeFileAddedResult\n        }\n\n        this.#restricter.validateSingleFile(newFile)\n\n        // need to add it to the new local state immediately, so we can use the state to validate the next files too\n        nextFilesState[newFile.id] = newFile\n        validFilesToAdd.push(newFile)\n      } catch (err) {\n        errors.push(err)\n      }\n    }\n\n    try {\n      // need to run this separately because it's much more slow, so if we run it inside the for-loop it will be very slow\n      // when many files are added\n      this.#restricter.validateAggregateRestrictions(Object.values(existingFiles), validFilesToAdd)\n    } catch (err) {\n      errors.push(err)\n\n      // If we have any aggregate error, don't allow adding this batch\n      return {\n        nextFilesState: existingFiles,\n        validFilesToAdd: [],\n        errors,\n      }\n    }\n\n    return {\n      nextFilesState,\n      validFilesToAdd,\n      errors,\n    }\n  }\n\n  /**\n   * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n   * try to guess file type in a clever way, check file against restrictions,\n   * and start an upload if `autoProceed === true`.\n   *\n   * @param {object} file object to add\n   * @returns {string} id for the added file\n   */\n  addFile (file) {\n    this.#assertNewUploadAllowed(file)\n\n    const { nextFilesState, validFilesToAdd, errors } = this.#checkAndUpdateFileState([file])\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    if (errors.length > 0) throw errors[0]\n\n    this.setState({ files: nextFilesState })\n\n    const [firstValidFileToAdd] = validFilesToAdd\n\n    this.emit('file-added', firstValidFileToAdd)\n    this.emit('files-added', validFilesToAdd)\n    this.log(`Added file: ${firstValidFileToAdd.name}, ${firstValidFileToAdd.id}, mime type: ${firstValidFileToAdd.type}`)\n\n    this.#startIfAutoProceed()\n\n    return firstValidFileToAdd.id\n  }\n\n  /**\n   * Add multiple files to `state.files`. See the `addFile()` documentation.\n   *\n   * If an error occurs while adding a file, it is logged and the user is notified.\n   * This is good for UI plugins, but not for programmatic use.\n   * Programmatic users should usually still use `addFile()` on individual files.\n   */\n  addFiles (fileDescriptors) {\n    this.#assertNewUploadAllowed()\n\n    const { nextFilesState, validFilesToAdd, errors } = this.#checkAndUpdateFileState(fileDescriptors)\n\n    const restrictionErrors = errors.filter((error) => error.isRestriction)\n    this.#informAndEmit(restrictionErrors)\n\n    const nonRestrictionErrors = errors.filter((error) => !error.isRestriction)\n\n    if (nonRestrictionErrors.length > 0) {\n      let message = 'Multiple errors occurred while adding files:\\n'\n      nonRestrictionErrors.forEach((subError) => {\n        message += `\\n * ${subError.message}`\n      })\n\n      this.info({\n        message: this.i18n('addBulkFilesFailed', { smart_count: nonRestrictionErrors.length }),\n        details: message,\n      }, 'error', this.opts.infoTimeout)\n\n      if (typeof AggregateError === 'function') {\n        throw new AggregateError(nonRestrictionErrors, message)\n      } else {\n        const err = new Error(message)\n        err.errors = nonRestrictionErrors\n        throw err\n      }\n    }\n\n    // OK, we haven't thrown an error, we can start updating state and emitting events now:\n\n    this.setState({ files: nextFilesState })\n\n    validFilesToAdd.forEach((file) => {\n      this.emit('file-added', file)\n    })\n\n    this.emit('files-added', validFilesToAdd)\n\n    if (validFilesToAdd.length > 5) {\n      this.log(`Added batch of ${validFilesToAdd.length} files`)\n    } else {\n      Object.values(validFilesToAdd).forEach((file) => {\n        this.log(`Added file: ${file.name}\\n id: ${file.id}\\n type: ${file.type}`)\n      })\n    }\n\n    if (validFilesToAdd.length > 0) {\n      this.#startIfAutoProceed()\n    }\n  }\n\n  removeFiles (fileIDs, reason) {\n    const { files, currentUploads } = this.getState()\n    const updatedFiles = { ...files }\n    const updatedUploads = { ...currentUploads }\n\n    const removedFiles = Object.create(null)\n    fileIDs.forEach((fileID) => {\n      if (files[fileID]) {\n        removedFiles[fileID] = files[fileID]\n        delete updatedFiles[fileID]\n      }\n    })\n\n    // Remove files from the `fileIDs` list in each upload.\n    function fileIsNotRemoved (uploadFileID) {\n      return removedFiles[uploadFileID] === undefined\n    }\n\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved)\n\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        delete updatedUploads[uploadID]\n        return\n      }\n\n      const { capabilities } = this.getState()\n      if (newFileIDs.length !== currentUploads[uploadID].fileIDs.length\n          && !capabilities.individualCancellation) {\n        throw new Error('individualCancellation is disabled')\n      }\n\n      updatedUploads[uploadID] = {\n        ...currentUploads[uploadID],\n        fileIDs: newFileIDs,\n      }\n    })\n\n    const stateUpdate = {\n      currentUploads: updatedUploads,\n      files: updatedFiles,\n    }\n\n    // If all files were removed - allow new uploads,\n    // and clear recoveredState\n    if (Object.keys(updatedFiles).length === 0) {\n      stateUpdate.allowNewUpload = true\n      stateUpdate.error = null\n      stateUpdate.recoveredState = null\n    }\n\n    this.setState(stateUpdate)\n    this.calculateTotalProgress()\n\n    const removedFileIDs = Object.keys(removedFiles)\n    removedFileIDs.forEach((fileID) => {\n      this.emit('file-removed', removedFiles[fileID], reason)\n    })\n\n    if (removedFileIDs.length > 5) {\n      this.log(`Removed ${removedFileIDs.length} files`)\n    } else {\n      this.log(`Removed files: ${removedFileIDs.join(', ')}`)\n    }\n  }\n\n  removeFile (fileID, reason = null) {\n    this.removeFiles([fileID], reason)\n  }\n\n  pauseResume (fileID) {\n    if (!this.getState().capabilities.resumableUploads\n         || this.getFile(fileID).uploadComplete) {\n      return undefined\n    }\n\n    const wasPaused = this.getFile(fileID).isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused,\n    })\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = { ...updatedFiles[file], isPaused: true }\n      updatedFiles[file] = updatedFile\n    })\n\n    this.setState({ files: updatedFiles })\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = { ...this.getState().files }\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete\n             && updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({ files: updatedFiles })\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = { ...this.getState().files }\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = {\n        ...updatedFiles[file],\n        isPaused: false,\n        error: null,\n      }\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null,\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    if (filesToRetry.length === 0) {\n      return Promise.resolve({\n        successful: [],\n        failed: [],\n      })\n    }\n\n    const uploadID = this.#createUpload(filesToRetry, {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  cancelAll ({ reason = 'user' } = {}) {\n    this.emit('cancel-all', { reason })\n\n    // Only remove existing uploads if user is canceling\n    if (reason === 'user') {\n      const { files } = this.getState()\n\n      const fileIDs = Object.keys(files)\n      if (fileIDs.length) {\n        this.removeFiles(fileIDs, 'cancel-all')\n      }\n\n      this.setState(getDefaultUploadState())\n      // todo should we call this.emit('reset-progress') like we do for resetProgress?\n    }\n  }\n\n  retryUpload (fileID) {\n    this.setFileState(fileID, {\n      error: null,\n      isPaused: false,\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this.#createUpload([fileID], {\n      forceAllowNewUpload: true, // create new upload even if allowNewUpload: false\n    })\n    return this.#runUpload(uploadID)\n  }\n\n  logout () {\n    this.iteratePlugins(plugin => {\n      if (plugin.provider && plugin.provider.logout) {\n        plugin.provider.logout()\n      }\n    })\n  }\n\n  // ___Why throttle at 500ms?\n  //    - We must throttle at >250ms for superfocus in Dashboard to work well\n  //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).\n  //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,\n  //    and click 'ADD MORE FILES', - focus won't activate in Firefox.\n  //    - We must throttle at around >500ms to avoid performance lags.\n  //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.\n  calculateProgress = throttle((file, data) => {\n    const fileInState = this.getFile(file?.id)\n    if (file == null || !fileInState) {\n      this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n      return\n    }\n\n    if (fileInState.progress.percentage === 100) {\n      this.log(`Not setting progress for a file that has been already uploaded: ${file.id}`)\n      return\n    }\n\n    // bytesTotal may be null or zero; in that case we can't divide by it\n    const canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0\n    this.setFileState(file.id, {\n      progress: {\n        ...fileInState.progress,\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: canHavePercentage\n          ? Math.round((data.bytesUploaded / data.bytesTotal) * 100)\n          : 0,\n      },\n    })\n\n    this.calculateTotalProgress()\n  }, 500, { leading: true, trailing: true })\n\n  calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = this.getFiles()\n\n    const inProgress = files.filter((file) => {\n      return file.progress.uploadStarted\n        || file.progress.preprocess\n        || file.progress.postprocess\n    })\n\n    if (inProgress.length === 0) {\n      this.emit('progress', 0)\n      this.setState({ totalProgress: 0 })\n      return\n    }\n\n    const sizedFiles = inProgress.filter((file) => file.progress.bytesTotal != null)\n    const unsizedFiles = inProgress.filter((file) => file.progress.bytesTotal == null)\n\n    if (sizedFiles.length === 0) {\n      const progressMax = inProgress.length * 100\n      const currentProgress = unsizedFiles.reduce((acc, file) => {\n        return acc + file.progress.percentage\n      }, 0)\n      const totalProgress = Math.round((currentProgress / progressMax) * 100)\n      this.setState({ totalProgress })\n      return\n    }\n\n    let totalSize = sizedFiles.reduce((acc, file) => {\n      return acc + file.progress.bytesTotal\n    }, 0)\n    const averageSize = totalSize / sizedFiles.length\n    totalSize += averageSize * unsizedFiles.length\n\n    let uploadedSize = 0\n    sizedFiles.forEach((file) => {\n      uploadedSize += file.progress.bytesUploaded\n    })\n    unsizedFiles.forEach((file) => {\n      uploadedSize += (averageSize * (file.progress.percentage || 0)) / 100\n    })\n\n    let totalProgress = totalSize === 0\n      ? 0\n      : Math.round((uploadedSize / totalSize) * 100)\n\n    // hot fix, because:\n    // uploadedSize ended up larger than totalSize, resulting in 1325% total\n    if (totalProgress > 100) {\n      totalProgress = 100\n    }\n\n    this.setState({ totalProgress })\n    this.emit('progress', totalProgress)\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  #addListeners () {\n    /**\n     * @param {Error} error\n     * @param {object} [file]\n     * @param {object} [response]\n     */\n    const errorHandler = (error, file, response) => {\n      let errorMsg = error.message || 'Unknown error'\n      if (error.details) {\n        errorMsg += ` ${error.details}`\n      }\n\n      this.setState({ error: errorMsg })\n\n      if (file != null && file.id in this.getState().files) {\n        this.setFileState(file.id, {\n          error: errorMsg,\n          response,\n        })\n      }\n    }\n\n    this.on('error', errorHandler)\n\n    this.on('upload-error', (file, error, response) => {\n      errorHandler(error, file, response)\n\n      if (typeof error === 'object' && error.message) {\n        this.log(error.message, 'error')\n        const newError = new Error(this.i18n('failedToUpload', { file: file?.name }))\n        newError.isUserFacing = true // todo maybe don't do this with all errors?\n        newError.details = error.message\n        if (error.details) {\n          newError.details += ` ${error.details}`\n        }\n        this.#informAndEmit([newError])\n      } else {\n        this.#informAndEmit([error])\n      }\n    })\n\n    let uploadStalledWarningRecentlyEmitted\n    this.on('upload-stalled', (error, files) => {\n      const { message } = error\n      const details = files.map(file => file.meta.name).join(', ')\n      if (!uploadStalledWarningRecentlyEmitted) {\n        this.info({ message, details }, 'warning', this.opts.infoTimeout)\n        uploadStalledWarningRecentlyEmitted = setTimeout(() => {\n          uploadStalledWarningRecentlyEmitted = null\n        }, this.opts.infoTimeout)\n      }\n      this.log(`${message} ${details}`.trim(), 'warning')\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    const onUploadStarted = (files) => {\n      const filesFiltered = files.filter((file) => {\n        const exists = (file != null && this.getFile(file.id))\n        if (!exists) this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return exists\n      })\n\n      const filesState = Object.fromEntries(filesFiltered.map((file) => ([\n        file.id,\n        {\n          progress: {\n            uploadStarted: Date.now(),\n            uploadComplete: false,\n            percentage: 0,\n            bytesUploaded: 0,\n            bytesTotal: file.size,\n          },\n        },\n      ])))\n\n      this.patchFilesState(filesState)\n    }\n\n    this.on('upload-start', (files) => {\n      files.forEach((file) => {\n        // todo backward compat, remove this event in a next major\n        this.emit('upload-started', file)\n      })\n      onUploadStarted(files)\n    })\n\n    this.on('upload-progress', this.calculateProgress)\n\n    this.on('upload-success', (file, uploadResp) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n\n      const currentProgress = this.getFile(file.id).progress\n      this.setFileState(file.id, {\n        progress: {\n          ...currentProgress,\n          postprocess: this.#postProcessors.size > 0 ? {\n            mode: 'indeterminate',\n          } : null,\n          uploadComplete: true,\n          percentage: 100,\n          bytesUploaded: currentProgress.bytesTotal,\n        },\n        response: uploadResp,\n        uploadURL: uploadResp.uploadURL,\n        isPaused: false,\n      })\n\n      // Remote providers sometimes don't tell us the file size,\n      // but we can know how many bytes we uploaded once the upload is complete.\n      if (file.size == null) {\n        this.setFileState(file.id, {\n          size: uploadResp.bytesUploaded || currentProgress.bytesTotal,\n        })\n      }\n\n      this.calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getFile(file.id).progress, preprocess: progress },\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = { ...this.getState().files }\n      files[file.id] = { ...files[file.id], progress: { ...files[file.id].progress } }\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: { ...this.getState().files[file.id].progress, postprocess: progress },\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (file == null || !this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file?.id}`)\n        return\n      }\n      const files = {\n        ...this.getState().files,\n      }\n      files[file.id] = {\n        ...files[file.id],\n        progress: {\n          ...files[file.id].progress,\n        },\n      }\n      delete files[file.id].progress.postprocess\n\n      this.setState({ files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this.calculateTotalProgress()\n    })\n\n    this.on('dashboard:file-edit-complete', (file) => {\n      if (file) {\n        this.#checkRequiredMetaFieldsOnFile(file)\n      }\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined' && window.addEventListener) {\n      window.addEventListener('online', this.#updateOnlineStatus)\n      window.addEventListener('offline', this.#updateOnlineStatus)\n      setTimeout(this.#updateOnlineStatus, 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online = typeof window.navigator.onLine !== 'undefined'\n      ? window.navigator.onLine\n      : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  #updateOnlineStatus = this.updateOnlineStatus.bind(this)\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @returns {object} self for chaining\n   */\n  // eslint-disable-next-line no-shadow\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      const msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.`\n        + ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    const existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      const msg = `Already found a plugin named '${existsPluginAlready.id}'. `\n        + `Tried to use: '${pluginId}'.\\n`\n        + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.'\n      throw new Error(msg)\n    }\n\n    if (Plugin.VERSION) {\n      this.log(`Using ${pluginId} v${Plugin.VERSION}`)\n    }\n\n    if (plugin.type in this.#plugins) {\n      this.#plugins[plugin.type].push(plugin)\n    } else {\n      this.#plugins[plugin.type] = [plugin]\n    }\n    plugin.install()\n\n    this.emit('plugin-added', plugin)\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} id plugin id\n   * @returns {BasePlugin|undefined}\n   */\n  getPlugin (id) {\n    for (const plugins of Object.values(this.#plugins)) {\n      const foundPlugin = plugins.find(plugin => plugin.id === id)\n      if (foundPlugin != null) return foundPlugin\n    }\n    return undefined\n  }\n\n  [Symbol.for('uppy test: getPlugins')] (type) {\n    return this.#plugins[type]\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {Function} method that will be run on each plugin\n   */\n  iteratePlugins (method) {\n    Object.values(this.#plugins).flat(1).forEach(method)\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    this.log(`Removing plugin ${instance.id}`)\n    this.emit('plugin-remove', instance)\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const list = this.#plugins[instance.type]\n    // list.indexOf failed here, because Vue3 converted the plugin instance\n    // to a Proxy object, which failed the strict comparison test:\n    // obj !== objProxy\n    const index = list.findIndex(item => item.id === instance.id)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n\n    const state = this.getState()\n    const updatedState = {\n      plugins: {\n        ...state.plugins,\n        [instance.id]: undefined,\n      },\n    }\n    this.setState(updatedState)\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close ({ reason } = {}) {\n    this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`)\n\n    this.cancelAll({ reason })\n\n    this.#storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      this.removePlugin(plugin)\n    })\n\n    if (typeof window !== 'undefined' && window.removeEventListener) {\n      window.removeEventListener('online', this.#updateOnlineStatus)\n      window.removeEventListener('offline', this.#updateOnlineStatus)\n    }\n  }\n\n  hideInfo () {\n    const { info } = this.getState()\n\n    this.setState({ info: info.slice(1) })\n\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Set info message in `state.info`, so that UI plugins like `Informer`\n   * can display the message.\n   *\n   * @param {string | object} message Message to be displayed by the informer\n   * @param {string} [type]\n   * @param {number} [duration]\n   */\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: [\n        ...this.getState().info,\n        {\n          type,\n          message: isComplexMessage ? message.message : message,\n          details: isComplexMessage ? message.details : null,\n        },\n      ],\n    })\n\n    setTimeout(() => this.hideInfo(), duration)\n\n    this.emit('info-visible')\n  }\n\n  /**\n   * Passes messages to a function, provided in `opts.logger`.\n   * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.\n   *\n   * @param {string|object} message to log\n   * @param {string} [type] optional `error` or `warning`\n   */\n  log (message, type) {\n    const { logger } = this.opts\n    switch (type) {\n      case 'error': logger.error(message); break\n      case 'warning': logger.warn(message); break\n      default: logger.debug(message); break\n    }\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this.#removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this.#runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @returns {string} ID of this upload.\n   */\n  #createUpload (fileIDs, opts = {}) {\n    // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`\n    const { forceAllowNewUpload = false } = opts\n\n    const { allowNewUpload, currentUploads } = this.getState()\n    if (!allowNewUpload && !forceAllowNewUpload) {\n      throw new Error('Cannot create a new upload: already uploading.')\n    }\n\n    const uploadID = nanoid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs,\n    })\n\n    this.setState({\n      allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,\n\n      currentUploads: {\n        ...currentUploads,\n        [uploadID]: {\n          fileIDs,\n          step: 0,\n          result: {},\n        },\n      },\n    })\n\n    return uploadID\n  }\n\n  [Symbol.for('uppy test: createUpload')] (...args) { return this.#createUpload(...args) }\n\n  #getUpload (uploadID) {\n    const { currentUploads } = this.getState()\n\n    return currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this.#getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const { currentUploads } = this.getState()\n    const currentUpload = { ...currentUploads[uploadID], result: { ...currentUploads[uploadID].result, ...data } }\n    this.setState({\n      currentUploads: { ...currentUploads, [uploadID]: currentUpload },\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  #removeUpload (uploadID) {\n    const currentUploads = { ...this.getState().currentUploads }\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads,\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  async #runUpload (uploadID) {\n    const getCurrentUpload = () => {\n      const { currentUploads } = this.getState()\n      return currentUploads[uploadID]\n    }\n\n    let currentUpload = getCurrentUpload()\n\n    const steps = [\n      ...this.#preProcessors,\n      ...this.#uploaders,\n      ...this.#postProcessors,\n    ]\n    try {\n      for (let step = currentUpload.step || 0; step < steps.length; step++) {\n        if (!currentUpload) {\n          break\n        }\n        const fn = steps[step]\n\n        this.setState({\n          currentUploads: {\n            ...this.getState().currentUploads,\n            [uploadID]: {\n              ...currentUpload,\n              step,\n            },\n          },\n        })\n\n        const { fileIDs } = currentUpload\n\n        // TODO give this the `updatedUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        await fn(fileIDs, uploadID)\n\n        // Update currentUpload value in case it was modified asynchronously.\n        currentUpload = getCurrentUpload()\n      }\n    } catch (err) {\n      this.#removeUpload(uploadID)\n      throw err\n    }\n\n    // Set result data.\n    if (currentUpload) {\n      // Mark postprocessing step as complete if necessary; this addresses a case where we might get\n      // stuck in the postprocessing UI while the upload is fully complete.\n      // If the postprocessing steps do not do any work, they may not emit postprocessing events at\n      // all, and never mark the postprocessing as complete. This is fine on its own but we\n      // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress\n      // state if any postprocessors are registered. That is to avoid a \"flash of completed state\"\n      // before the postprocessing plugins can emit events.\n      //\n      // So, just in case an upload with postprocessing plugins *has* completed *without* emitting\n      // postprocessing completion, we do it instead.\n      currentUpload.fileIDs.forEach((fileID) => {\n        const file = this.getFile(fileID)\n        if (file && file.progress.postprocess) {\n          this.emit('postprocess-complete', file)\n        }\n      })\n\n      const files = currentUpload.fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => !file.error)\n      const failed = files.filter((file) => file.error)\n      await this.addResultData(uploadID, { successful, failed, uploadID })\n\n      // Update currentUpload value in case it was modified asynchronously.\n      currentUpload = getCurrentUpload()\n    }\n    // Emit completion events.\n    // This is in a separate function so that the `currentUploads` variable\n    // always refers to the latest state. In the handler right above it refers\n    // to an outdated object without the `.result` property.\n    let result\n    if (currentUpload) {\n      result = currentUpload.result\n      this.emit('complete', result)\n\n      this.#removeUpload(uploadID)\n    }\n    if (result == null) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n    }\n    return result\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @returns {Promise}\n   */\n  upload () {\n    if (!this.#plugins.uploader?.length) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let { files } = this.getState()\n\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      files = onBeforeUploadResult\n      // Updating files in state, because uploader plugins receive file IDs,\n      // and then fetch the actual file object from state\n      this.setState({\n        files,\n      })\n    }\n\n    return Promise.resolve()\n      .then(() => this.#restricter.validateMinNumberOfFiles(files))\n      .catch((err) => {\n        this.#informAndEmit([err])\n        throw err\n      })\n      .then(() => {\n        if (!this.#checkRequiredMetaFields(files)) {\n          throw new RestrictionError(this.i18n('missingRequiredMetaField'))\n        }\n      })\n      .catch((err) => {\n        // Doing this in a separate catch because we already emited and logged\n        // all the errors in `checkRequiredMetaFields` so we only throw a generic\n        // missing fields error here.\n        throw err\n      })\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.values(currentUploads).flatMap(curr => curr.fileIDs)\n\n        const waitingFileIDs = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this.#createUpload(waitingFileIDs)\n        return this.#runUpload(uploadID)\n      })\n      .catch((err) => {\n        this.emit('error', err)\n        this.log(err, 'error')\n        throw err\n      })\n  }\n}\n\nexport default Uppy\n"],"mappings":"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"}