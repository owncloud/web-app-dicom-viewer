{"version":3,"names":["has","insertReplacement","source","rx","replacement","newParts","forEach","chunk","push","Symbol","split","raw","i","list","length","interpolate","phrase","options","dollarRegex","dollarBillsYall","interpolated","arg","Object","keys","replace","RegExp","_apply","_classPrivateFieldLooseKey","Translator","constructor","locales","defineProperty","value","_apply2","locale","strings","pluralize","n","Array","isArray","_classPrivateFieldLooseBase","translate","key","translateArray","join","Error","string","hasPluralForms","smart_count","plural","prevLocale"],"sources":["Translator.ts"],"sourcesContent":["import has from './hasProperty.ts'\n\n// We're using a generic because languages have different plural rules.\nexport interface Locale<T extends number = number> {\n  strings: Record<string, string | Record<T, string>>\n  pluralize: (n: number) => T\n}\n\ntype Options = {\n  smart_count?: number\n} & {\n  [key: string]: string | number\n}\n\nfunction insertReplacement(\n  source: Array<string | unknown>,\n  rx: RegExp,\n  replacement: string,\n): Array<string | unknown> {\n  const newParts: Array<string | unknown> = []\n  source.forEach((chunk) => {\n    // When the source contains multiple placeholders for interpolation,\n    // we should ignore chunks that are not strings, because those\n    // can be JSX objects and will be otherwise incorrectly turned into strings.\n    // Without this condition weâ€™d get this: [object Object] hello [object Object] my <button>\n    if (typeof chunk !== 'string') {\n      return newParts.push(chunk)\n    }\n\n    return rx[Symbol.split](chunk).forEach((raw, i, list) => {\n      if (raw !== '') {\n        newParts.push(raw)\n      }\n\n      // Interlace with the `replacement` value\n      if (i < list.length - 1) {\n        newParts.push(replacement)\n      }\n    })\n  })\n  return newParts\n}\n\n/**\n * Takes a string with placeholder variables like `%{smart_count} file selected`\n * and replaces it with values from options `{smart_count: 5}`\n *\n * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n *\n * @param phrase that needs interpolation, with placeholders\n * @param options with values that will be used to replace placeholders\n */\nfunction interpolate(\n  phrase: string,\n  options?: Options,\n): Array<string | unknown> {\n  const dollarRegex = /\\$/g\n  const dollarBillsYall = '$$$$'\n  let interpolated: Array<string | unknown> = [phrase]\n\n  if (options == null) return interpolated\n\n  for (const arg of Object.keys(options)) {\n    if (arg !== '_') {\n      // Ensure replacement value is escaped to prevent special $-prefixed\n      // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n      // be escaped with \"$\" itself, and we need two in the resulting output.\n      let replacement = options[arg]\n      if (typeof replacement === 'string') {\n        replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall)\n      }\n      // We create a new `RegExp` each time instead of using a more-efficient\n      // string replace so that the same argument can be replaced multiple times\n      // in the same phrase.\n      interpolated = insertReplacement(\n        interpolated,\n        new RegExp(`%\\\\{${arg}\\\\}`, 'g'),\n        replacement as string,\n      )\n    }\n  }\n\n  return interpolated\n}\n\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n */\nexport default class Translator {\n  protected locale: Locale\n\n  constructor(locales: Locale | Locale[]) {\n    this.locale = {\n      strings: {},\n      pluralize(n: number): 0 | 1 {\n        if (n === 1) {\n          return 0\n        }\n        return 1\n      },\n    }\n\n    if (Array.isArray(locales)) {\n      locales.forEach(this.#apply, this)\n    } else {\n      this.#apply(locales)\n    }\n  }\n\n  #apply(locale?: Locale): void {\n    if (!locale?.strings) {\n      return\n    }\n\n    const prevLocale = this.locale\n    this.locale = {\n      ...prevLocale,\n      strings: { ...prevLocale.strings, ...locale.strings },\n    } as any\n    this.locale.pluralize = locale.pluralize || prevLocale.pluralize\n  }\n\n  /**\n   * Public translate method\n   *\n   * @param key\n   * @param options with values that will be used later to replace placeholders in string\n   * @returns string translated (and interpolated)\n   */\n  translate(key: string, options?: Options): string {\n    return this.translateArray(key, options).join('')\n  }\n\n  /**\n   * Get a translation and return the translated and interpolated parts as an array.\n   *\n   * @returns The translated and interpolated parts, in order.\n   */\n  translateArray(key: string, options?: Options): Array<string | unknown> {\n    if (!has(this.locale.strings, key)) {\n      throw new Error(`missing string: ${key}`)\n    }\n\n    const string = this.locale.strings[key]\n    const hasPluralForms = typeof string === 'object'\n\n    if (hasPluralForms) {\n      if (options && typeof options.smart_count !== 'undefined') {\n        const plural = this.locale.pluralize(options.smart_count)\n        return interpolate(string[plural], options)\n      }\n      throw new Error(\n        'Attempted to use a string with plural forms, but no value was given for %{smart_count}',\n      )\n    }\n\n    return interpolate(string, options)\n  }\n}\n"],"mappings":"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"}