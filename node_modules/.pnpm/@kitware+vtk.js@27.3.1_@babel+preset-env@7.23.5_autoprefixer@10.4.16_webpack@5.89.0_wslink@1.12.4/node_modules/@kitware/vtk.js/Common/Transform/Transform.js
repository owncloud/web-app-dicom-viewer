import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import { vec3 } from 'gl-matrix';
import macro from '../../macros.js';
import { f as vtkMath } from '../Core/Math/index.js';
import { IDENTITY } from '../Core/Math/Constants.js';

// vtkTransform methods
// ----------------------------------------------------------------------------
// eslint-disable-next-line import/no-mutable-exports

var newInstance;

function vtkTransform(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkAbstractTransform', 'vtkHomogeneousTransform', 'vtkTransform');

  publicAPI.transformPoint = function (point, out) {
    vec3.transformMat4(out, point, model.matrix);
    return out;
  };

  publicAPI.getInverse = function () {
    return newInstance({
      matrix: vtkMath.invertMatrix(Array.from(model.matrix), [], 4)
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  matrix: _toConsumableArray(IDENTITY)
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.obj(publicAPI, model);
  macro.setGetArray(publicAPI, model, ['matrix'], 16);
  vtkTransform(publicAPI, model);
} // ----------------------------------------------------------------------------

newInstance = macro.newInstance(extend, 'vtkTransform');

var vtkTransform$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkTransform$1 as default, extend, newInstance };
