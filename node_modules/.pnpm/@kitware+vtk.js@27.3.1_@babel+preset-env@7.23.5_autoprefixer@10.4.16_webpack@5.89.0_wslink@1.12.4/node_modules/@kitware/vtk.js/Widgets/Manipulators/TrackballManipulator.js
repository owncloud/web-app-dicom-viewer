import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { mat4, vec3 } from 'gl-matrix';
import macro from '../../macros.js';
import { j as cross, r as radiansFromDegrees } from '../../Common/Core/Math/index.js';
import vtkAbstractManipulator from './AbstractManipulator.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function trackballRotate(prevX, prevY, curX, curY, origin, direction, renderer, glRenderWindow) {
  var dx = curX - prevX;
  var dy = curY - prevY;
  var camera = renderer.getActiveCamera();
  var viewUp = camera.getViewUp();
  var dop = camera.getDirectionOfProjection();
  var size = renderer.getRenderWindow().getInteractor().getView().getViewportSize(renderer);
  var xdeg = 360.0 * dx / size[0];
  var ydeg = 360.0 * dy / size[1];
  var newDirection = new Float64Array([direction[0], direction[1], direction[2]]);
  var xDisplayAxis = viewUp;
  var yDisplayAxis = [0, 0, 0];
  cross(dop, viewUp, yDisplayAxis);
  var rot = mat4.identity(new Float64Array(16));
  mat4.rotate(rot, rot, radiansFromDegrees(xdeg), xDisplayAxis);
  mat4.rotate(rot, rot, radiansFromDegrees(-ydeg), yDisplayAxis);
  vec3.transformMat4(newDirection, newDirection, rot);
  return newDirection;
} // ----------------------------------------------------------------------------
// vtkTrackballManipulator methods
// ----------------------------------------------------------------------------

function vtkTrackballManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkTrackballManipulator');
  var prevX = 0;
  var prevY = 0;

  publicAPI.handleEvent = function (callData, glRenderWindow) {
    var newDirection = trackballRotate(prevX, prevY, callData.position.x, callData.position.y, publicAPI.getOrigin(callData), publicAPI.getNormal(callData), callData.pokedRenderer);
    prevX = callData.position.x;
    prevY = callData.position.y;
    return newDirection;
  };

  publicAPI.reset = function (callData) {
    prevX = callData.position.x;
    prevY = callData.position.y;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


function defaultValues(initialValues) {
  return _objectSpread({}, initialValues);
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  vtkAbstractManipulator.extend(publicAPI, model, defaultValues(initialValues));
  vtkTrackballManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = macro.newInstance(extend, 'vtkTrackballManipulator'); // ----------------------------------------------------------------------------

var vtkTrackballManipulator$1 = {
  trackballRotate: trackballRotate,
  extend: extend,
  newInstance: newInstance
};

export { vtkTrackballManipulator$1 as default, extend, newInstance, trackballRotate };
