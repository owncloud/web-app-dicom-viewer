import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import macro from '../../../macros.js';
import { f as vtkMath } from '../../../Common/Core/Math/index.js';
import { getPixelWorldHeightAtCoord } from '../WidgetManager.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function vtkOriginMixin(publicAPI, model) {
  var superClass = _objectSpread({}, publicAPI);

  publicAPI.translate = function (dx, dy, dz) {
    var _publicAPI$getOriginB = publicAPI.getOriginByReference(),
        _publicAPI$getOriginB2 = _slicedToArray(_publicAPI$getOriginB, 3),
        x = _publicAPI$getOriginB2[0],
        y = _publicAPI$getOriginB2[1],
        z = _publicAPI$getOriginB2[2];

    publicAPI.setOrigin(x + dx, y + dy, z + dz);
  };

  publicAPI.getOrigin = function (displayScaleParams) {
    var origin = superClass.getOrigin();

    if (!model.offset) {
      return origin;
    }

    if (!displayScaleParams) {
      return vtkMath.add(origin, model.offset, origin);
    }

    var pixelWorldHeight = getPixelWorldHeightAtCoord(origin, displayScaleParams);
    var rendererPixelDims = displayScaleParams.rendererPixelDims;
    var totalSize = Math.min(rendererPixelDims[0], rendererPixelDims[1]);
    return vtkMath.multiplyAccumulate(origin, model.offset, totalSize * pixelWorldHeight, origin);
  };
} // ----------------------------------------------------------------------------

/**
 * offset: optional offset that can be scaled to pixel screen space.
 */


var DEFAULT_VALUES = {
  origin: null,
  offset: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  macro.setGetArray(publicAPI, model, ['origin', 'offset'], 3);
  vtkOriginMixin(publicAPI, model);
} // ----------------------------------------------------------------------------

var origin = {
  extend: extend
};

export { origin as default, extend };
