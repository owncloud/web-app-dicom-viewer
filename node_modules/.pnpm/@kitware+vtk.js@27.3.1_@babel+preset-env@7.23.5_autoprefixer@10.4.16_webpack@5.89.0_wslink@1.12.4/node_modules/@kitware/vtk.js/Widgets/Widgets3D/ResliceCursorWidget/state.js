import _defineProperty from '@babel/runtime/helpers/defineProperty';
import vtkStateBuilder from '../../Core/StateBuilder.js';
import { ScrollingMethods, planeNames } from './Constants.js';
import { ViewTypes } from '../../Core/WidgetManager/Constants.js';

var viewsColor3 = {
  X: [255, 0, 0],
  // red
  Y: [0, 255, 0],
  // green
  Z: [0, 0, 255] // blue

};
function generateState() {
  var _initialValue;

  var state = vtkStateBuilder.createBuilder().addField({
    name: 'center',
    initialValue: [0, 0, 0]
  }).addField({
    name: 'image',
    initialValue: null
  }).addField({
    name: 'activeViewType',
    initialValue: null
  }).addField({
    name: 'planes',
    initialValue: (_initialValue = {}, _defineProperty(_initialValue, ViewTypes.YZ_PLANE, {
      normal: [1, 0, 0],
      viewUp: [0, 0, 1]
    }), _defineProperty(_initialValue, ViewTypes.XZ_PLANE, {
      normal: [0, -1, 0],
      viewUp: [0, 0, 1]
    }), _defineProperty(_initialValue, ViewTypes.XY_PLANE, {
      normal: [0, 0, -1],
      viewUp: [0, -1, 0]
    }), _initialValue)
  }).addField({
    name: 'scrollingMethod',
    initialValue: ScrollingMethods.MIDDLE_MOUSE_BUTTON
  }).addField({
    name: 'cameraOffsets',
    initialValue: {}
  }).addField({
    name: 'viewUpFromViewType',
    initialValue: {}
  }).addStateFromMixin({
    labels: ['handles', 'sphere', 'center'],
    mixins: ['origin', 'color3', 'scale1', 'visible', 'manipulator'],
    name: 'centerHandle',
    initialValues: {
      scale1: 30,
      color3: [255, 255, 255]
    }
  });
  planeNames.reduce(function (viewState, view) {
    return planeNames.filter(function (v) {
      return v !== view;
    }).reduce(function (axisState, axis) {
      // Line handle
      axisState.addStateFromMixin({
        labels: ['handles', 'line', "lineIn".concat(view), "".concat(axis, "in").concat(view)],
        mixins: ['origin', 'color3', 'scale3', // scale3[2] will be automatically overwritten
        'orientation', 'visible', 'manipulator'],
        name: "axis".concat(axis, "in").concat(view),
        initialValues: {
          scale3: [4, 4, 4],
          color3: viewsColor3[axis]
        }
      }); // Rotation handle

      for (var rotationHandle = 0; rotationHandle < 2; ++rotationHandle) {
        axisState.addStateFromMixin({
          labels: ['handles', 'sphere', 'rotation', "rotationIn".concat(view), "".concat(axis, "in").concat(view), "point".concat(rotationHandle)],
          mixins: ['origin', 'color3', 'scale1', 'visible', 'manipulator'],
          name: "rotationHandle".concat(axis, "in").concat(view).concat(rotationHandle),
          initialValues: {
            scale1: 30,
            color3: viewsColor3[axis]
          }
        });
      }

      return axisState;
    }, viewState);
  }, state);
  return state.build();
}

export { generateState as default };
