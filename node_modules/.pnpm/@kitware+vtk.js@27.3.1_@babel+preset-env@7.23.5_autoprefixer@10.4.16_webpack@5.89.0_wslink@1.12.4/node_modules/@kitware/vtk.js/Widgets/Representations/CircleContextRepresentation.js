import _defineProperty from '@babel/runtime/helpers/defineProperty';
import macro from '../../macros.js';
import vtkCircleSource from '../../Filters/Sources/CircleSource.js';
import vtkGlyphRepresentation from './GlyphRepresentation.js';
import { Behavior } from './WidgetRepresentation/Constants.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// vtkCircleContextRepresentation methods
// ----------------------------------------------------------------------------

function vtkCircleContextRepresentation(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCircleContextRepresentation'); // --------------------------------------------------------------------------
  // Generic rendering pipeline
  // --------------------------------------------------------------------------

  model._pipeline.actor.getProperty().setOpacity(0.2);

  model._pipeline.mapper.setResolveCoincidentTopology(true);

  model._pipeline.mapper.setRelativeCoincidentTopologyPolygonOffsetParameters(-1, -1); // --------------------------------------------------------------------------


  publicAPI.setGlyphResolution = macro.chain(publicAPI.setGlyphResolution, model._pipeline.glyph.setResolution); // --------------------------------------------------------------------------

  publicAPI.setDrawBorder = macro.chain(publicAPI.setDrawBorder, function (draw) {
    return model._pipeline.glyph.setLines(draw);
  }); // --------------------------------------------------------------------------

  publicAPI.setDrawFace = macro.chain(publicAPI.setDrawFace, function (draw) {
    return model._pipeline.glyph.setFace(draw);
  }); // --------------------------------------------------------------------------

  publicAPI.setOpacity = function (opacity) {
    model._pipeline.actor.getProperty().setOpacity(opacity);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


function defaultValues(initialValues) {
  var _initialValues$pipeli, _initialValues$pipeli2, _initialValues$glyphR, _initialValues$drawBo, _initialValues$drawFa;

  return _objectSpread(_objectSpread({
    behavior: Behavior.CONTEXT,
    glyphResolution: 32,
    drawBorder: false,
    drawFace: true
  }, initialValues), {}, {
    _pipeline: _objectSpread({
      glyph: (_initialValues$pipeli = initialValues === null || initialValues === void 0 ? void 0 : (_initialValues$pipeli2 = initialValues.pipeline) === null || _initialValues$pipeli2 === void 0 ? void 0 : _initialValues$pipeli2.glyph) !== null && _initialValues$pipeli !== void 0 ? _initialValues$pipeli : vtkCircleSource.newInstance({
        resolution: (_initialValues$glyphR = initialValues.glyphResolution) !== null && _initialValues$glyphR !== void 0 ? _initialValues$glyphR : 32,
        radius: 1,
        lines: (_initialValues$drawBo = initialValues.drawBorder) !== null && _initialValues$drawBo !== void 0 ? _initialValues$drawBo : false,
        face: (_initialValues$drawFa = initialValues.drawFace) !== null && _initialValues$drawFa !== void 0 ? _initialValues$drawFa : true,
        direction: [0, 0, 1]
      })
    }, initialValues === null || initialValues === void 0 ? void 0 : initialValues.pipeline)
  });
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  vtkGlyphRepresentation.extend(publicAPI, model, defaultValues(initialValues));
  macro.setGet(publicAPI, model, ['glyphResolution', 'drawFace', 'drawBorder']);
  macro.get(publicAPI, model._pipeline, ['glyph', 'mapper', 'actor']); // Object specific methods

  vtkCircleContextRepresentation(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = macro.newInstance(extend, 'vtkCircleContextRepresentation'); // ----------------------------------------------------------------------------

var vtkCircleContextRepresentation$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkCircleContextRepresentation$1 as default, extend, newInstance };
