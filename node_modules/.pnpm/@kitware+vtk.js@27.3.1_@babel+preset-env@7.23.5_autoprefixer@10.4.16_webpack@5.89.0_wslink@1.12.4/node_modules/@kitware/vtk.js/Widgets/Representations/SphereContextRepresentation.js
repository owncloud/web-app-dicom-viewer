import _defineProperty from '@babel/runtime/helpers/defineProperty';
import macro from '../../macros.js';
import vtkSphereSource from '../../Filters/Sources/SphereSource.js';
import vtkGlyphRepresentation from './GlyphRepresentation.js';
import { Behavior } from './WidgetRepresentation/Constants.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function vtkSphereContextRepresentation(publicAPI, model) {
  model.classHierarchy.push('vtkSphereContextRepresentation');
  publicAPI.setGlyphResolution = macro.chain(publicAPI.setGlyphResolution, model._pipeline.glyph.setThetaResolution, model._pipeline.glyph.setPhiResolution);

  publicAPI.setDrawBorder = function (draw) {
    model._pipeline.glyph.setLines(draw);
  };

  publicAPI.setDrawFace = function (draw) {
    model._pipeline.glyph.setFace(draw);
  };

  publicAPI.setOpacity = function (opacity) {
    model._pipeline.actor.getProperty().setOpacity(opacity);
  };

  model._pipeline.actor.getProperty().setOpacity(0.2);
}

function defaultValues(initialValues) {
  var _initialValues$glyphR, _initialValues$glyphR2;

  return _objectSpread({
    glyphResolution: 32,
    drawBorder: false,
    drawFace: true,
    behavior: Behavior.CONTEXT,
    _pipeline: {
      glyph: vtkSphereSource.newInstance({
        phiResolution: (_initialValues$glyphR = initialValues.glyphResolution) !== null && _initialValues$glyphR !== void 0 ? _initialValues$glyphR : 32,
        thetaResolution: (_initialValues$glyphR2 = initialValues.glyphResolution) !== null && _initialValues$glyphR2 !== void 0 ? _initialValues$glyphR2 : 32
      })
    }
  }, initialValues);
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  vtkGlyphRepresentation.extend(publicAPI, model, defaultValues(initialValues));
  macro.setGet(publicAPI, model, ['glyphResolution']);
  vtkSphereContextRepresentation(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = macro.newInstance(extend, 'vtkSphereContextRepresentation');
var vtkSphereContextRepresentation$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkSphereContextRepresentation$1 as default, extend, newInstance };
