import macro from '../../macros.js';
import vtkCompositeCameraManipulator from './CompositeCameraManipulator.js';
import vtkCompositeMouseManipulator from './CompositeMouseManipulator.js';

// vtkMouseCameraTrackballZoomManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballZoomManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballZoomManipulator');

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
    var size = interactor.getView().getViewportSize(renderer);
    var camera = renderer.getActiveCamera();
    var direction = model.flipDirection ? -1 : 1;

    if (camera.getParallelProjection()) {
      model.zoomScale = 1.5 / size[1] * direction;
    } else {
      var range = camera.getClippingRange();
      model.zoomScale = 1.5 * (range[1] / size[1]) * direction;
    }
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var dy = model.previousPosition.y - position.y;
    var camera = renderer.getActiveCamera();

    if (camera.getParallelProjection()) {
      var k = dy * model.zoomScale;
      camera.setParallelScale((1.0 - k) * camera.getParallelScale());
    } else {
      var cameraPos = camera.getPosition();
      var cameraFp = camera.getFocalPoint();
      var norm = camera.getDirectionOfProjection();

      var _k = dy * model.zoomScale;

      var tmp = _k * norm[0];
      cameraPos[0] += tmp;
      cameraFp[0] += tmp;
      tmp = _k * norm[1];
      cameraPos[1] += tmp;
      cameraFp[1] += tmp;
      tmp = _k * norm[2];
      cameraPos[2] += tmp;
      cameraFp[2] += tmp;

      if (!camera.getFreezeFocalPoint()) {
        camera.setFocalPoint(cameraFp[0], cameraFp[1], cameraFp[2]);
      }

      camera.setPosition(cameraPos[0], cameraPos[1], cameraPos[2]);
      renderer.resetCameraClippingRange();
    }

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };

  publicAPI.onScroll = function (interactor, renderer, delta) {
    if (!delta) {
      return;
    }

    var camera = renderer.getActiveCamera();
    var dyf = 1 - delta / 10;

    if (camera.getParallelProjection()) {
      camera.setParallelScale(camera.getParallelScale() / dyf);
    } else {
      camera.dolly(dyf);
      renderer.resetCameraClippingRange();
    }

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  zoomScale: 0.0,
  flipDirection: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  macro.obj(publicAPI, model);
  vtkCompositeMouseManipulator.extend(publicAPI, model, initialValues);
  vtkCompositeCameraManipulator.extend(publicAPI, model, initialValues);
  macro.setGet(publicAPI, model, ['flipDirection']); // Object specific methods

  vtkMouseCameraTrackballZoomManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = macro.newInstance(extend, 'vtkMouseCameraTrackballZoomManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballZoomManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkMouseCameraTrackballZoomManipulator$1 as default, extend, newInstance };
