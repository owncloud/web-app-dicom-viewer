import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import macro from '../../../macros.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// vtkOBBNode methods
// ----------------------------------------------------------------------------

function vtkOBBNode(publicAPI, model) {
  // Set our classname
  model.classHierarchy.push('vtkOBBNode');
  /**
   * Copy a vtkOBBNode into an other one
   * @param {vtkOBBNode} nodeSource
   * @param {vtkOBBNode} nodeTarget
   */

  publicAPI.deepCopy = function (nodeSource) {
    publicAPI.setCorner(nodeSource.getCorner());
    var axes = nodeSource.getAxes();
    publicAPI.setAxes([_toConsumableArray(axes[0]), _toConsumableArray(axes[1]), _toConsumableArray(axes[2])]);
    publicAPI.setCells(_toConsumableArray(nodeSource.getCells()));

    if (nodeSource.getKids()) {
      var kids0 = vtkOBBNode.newInstance();
      kids0.setParent(publicAPI);
      var kids1 = vtkOBBNode.newInstance();
      kids1.setParent(publicAPI);
      kids0.deepCopy(nodeSource.getKids()[0]);
      kids1.deepCopy(nodeSource.getKids()[1], kids1);
      publicAPI.setKids(kids0, kids1);
    }
  };

  publicAPI.getAxis = function (axis) {
    return model.axes[axis];
  };
} // ----------------------------------------------------------------------------


function defaultValues(initialValues) {
  return _objectSpread({
    corner: [0, 0, 0],
    // center point of this node
    axes: [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
    // the axes defining the OBB - ordered from long->short
    cells: []
  }, initialValues);
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, defaultValues(initialValues));
  model.corner = [0, 0, 0];
  model.axes = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
  model.parent = null; // parent node; null if root

  model.kids = null; // two children of this node; nullptr if leaf

  model.cells = []; // list of cells in node
  // Build VTK API

  macro.setGet(publicAPI, model, ['parent', 'cells', 'kids']); // macro.setGetArray(publicAPI, model, ['kids'], 2);

  macro.setGetArray(publicAPI, model, ['corner', 'axes'], 3); // Make this a VTK object

  macro.obj(publicAPI, model); // Object specific methods

  vtkOBBNode(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = macro.newInstance(extend, 'vtkOBBNode'); // ----------------------------------------------------------------------------

var vtkOBBNode$1 = {
  newInstance: newInstance,
  extend: extend
};

export { vtkOBBNode$1 as default, extend, newInstance };
