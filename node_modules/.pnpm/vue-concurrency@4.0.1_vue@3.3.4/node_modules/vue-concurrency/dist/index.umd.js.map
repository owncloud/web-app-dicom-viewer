{"version":3,"file":"index.umd.js","sources":["../src/utils/general.ts","../src/TaskInstance.ts","../src/Task.ts","../src/utils/ssr-utils.ts","../src/wrap-utils.ts","../src/TaskGroup.ts"],"sourcesContent":["import { computed, Ref, watch, reactive } from \"./api\";\nimport useTask, { Task } from \"../Task\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { AbortSignalWithPromise } from \"../types/index\";\n\nexport function waitForValue<T = any>(cb: () => T): Promise<T> {\n  return new Promise((resolve) => {\n    const stop = watch(cb, value => {\n      if (value !== undefined && value !== null) {\n        resolve(value);\n        stop && stop();\n      }\n    }, { immediate: true });\n  });\n}\n\nexport const reachedMaxConcurrency = (task: Task<any, any>): boolean =>\n  task._runningInstances.length >= task._maxConcurrency;\n\nexport const cancelFirstRunning = (task: Task<any, any>): void => {\n  const firstRunningInstance = task._activeInstances[0];\n  if (firstRunningInstance) {\n    firstRunningInstance.cancel();\n  }\n};\n\nexport const dropEnqueued = (task: Task<any, any>): void => {\n  task._enqueuedInstances.forEach((instance) => {\n    instance.isEnqueued = false;\n    instance.isDropped = true;\n  });\n};\n\ntype BooleanKeys<T> = {\n  [k in keyof T]: T[k] extends boolean ? k : never;\n}[keyof T];\n\nexport function filteredInstances(\n  cb: () => Task<any, any>,\n  key: BooleanKeys<TaskInstance<any>>\n) {\n  if (!key) {\n    return computed(() => []);\n  }\n\n  return computedFilterBy(() => cb()._instances, key);\n}\n\nfunction computedFilterBy<T>(cb: () => T[], key: keyof T, value?: any) {\n  return computed(() => {\n    const collection = cb();\n    return collection.filter((item) => {\n      const curr = item[key];\n      if (value) {\n        return curr === value;\n      }\n\n      return curr;\n    });\n  });\n}\n\nexport function computedLength(cb: () => any[]): Readonly<Ref<number>> {\n  return computed(() => {\n    const arr = cb();\n    return arr.length;\n  });\n}\n\nexport function computedLastOf<T>(cb: () => readonly T[]): Ref<T | undefined> {\n  return computed(() => {\n    const collection = cb();\n    return collection[collection.length - 1];\n  });\n}\n\nexport function computedFirstOf<T>(\n  cb: () => readonly T[]\n): Readonly<Ref<T | undefined>> {\n  return computed(() => {\n    const collection = cb();\n    return collection[0];\n  });\n}\n\nexport type Reactive<T> = {\n  [K in keyof T]: T[K] extends Ref<infer U> ? U : T[K];\n};\n\nexport const _reactiveContent = <T>(obj: T) => {\n  return obj as Reactive<T>;\n};\n\nexport function _reactive<T extends object>(obj: T) {\n  return reactive(obj) as T;\n}\n\nexport type DeferredObject<T> = {\n  promise: Promise<T>;\n  resolve: Function;\n  reject: Function;\n};\nexport function defer<T>(): DeferredObject<T> {\n  const deferredObject: Record<string, any> = {};\n  const promise = new Promise((resolve, reject) => {\n    deferredObject.resolve = resolve;\n    deferredObject.reject = reject;\n  });\n  deferredObject.promise = promise as Promise<T>;\n\n  return deferredObject as DeferredObject<T>;\n}\n\nexport function printTask(task: Task<any, any>) {\n  let taskType = \"General\";\n\n  if (task._isDropping) {\n    taskType = \"Drop\";\n  }\n\n  if (task._isEnqueuing) {\n    taskType = \"Enqueue\";\n  }\n\n  if (task._isRestartable) {\n    taskType = \"Restartable\";\n  }\n\n  if (task._isKeepingLatest) {\n    taskType = \"KeepLatest\";\n  }\n\n  let header = `${taskType} Task`;\n\n  if (taskType !== \"General\") {\n    header = `${header} with maxConcurrency ${task._maxConcurrency}`;\n  }\n\n  const instanceRows = task._instances.map((instance) => {\n    let colorEmoji;\n\n    if (instance.isSuccessful) {\n      colorEmoji = \"🍏\";\n    } else if (instance.isRunning || instance.isEnqueued) {\n      colorEmoji = \"🍊\";\n    } else if (instance.isError || instance.isCanceled || instance.isDropped) {\n      colorEmoji = \"🔴\";\n    }\n\n    const { status, value, error } = instance;\n    return { status: `${colorEmoji} ${status}`, value, error };\n  });\n\n  console.log(`🚦 ${header}`);\n  console.table(instanceRows);\n}\n\nexport function timeout(time) {\n  if (process.env.NODE_ENV === \"test\") {\n    return Promise.resolve();\n  }\n\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport function getCancelToken<T extends { CancelToken: any }>(\n  axios: T,\n  signal: AbortSignalWithPromise\n) {\n  return new axios.CancelToken((cancel) => {\n    signal.pr.catch((reason) => {\n      if (reason === \"cancel\") {\n        cancel();\n      }\n    });\n  });\n}\n\nexport function useAsyncTask<T, U extends any[]>(\n  fn: (signal: AbortSignalWithPromise, ...params: U) => Promise<T>\n) {\n  return useTask(function* (signal, ...params: U) {\n    return fn(signal, ...params);\n  });\n}\n","\nimport CAF, { cancelToken } from \"caf\";\nimport { computed, EffectScope } from \"./utils/api\";\nimport { _reactive, _reactiveContent, DeferredObject, defer } from \"./utils/general\";\nimport {\n  AbortSignalWithPromise,\n  TaskCb,\n  onFulfilled,\n  onRejected,\n} from \"./types/index\";\n\nexport type TaskInstanceStatus =\n  | \"running\"\n  | \"enqueued\"\n  | \"canceled\"\n  | \"canceling\"\n  | \"dropped\"\n  | \"error\"\n  | \"success\";\nexport interface TaskInstance<T> extends PromiseLike<T> {\n  id: number;\n\n  // Lifecycle\n  hasStarted: boolean;\n  isRunning: boolean;\n  isActive: boolean;\n  isFinished: boolean;\n  isError: boolean;\n  isSuccessful: boolean;\n\n  isCanceling: boolean;\n  isCanceled: boolean;\n\n  isNotDropped: boolean;\n  status: TaskInstanceStatus;\n\n  _run: () => void;\n  cancel: (options?: { force: boolean }) => void;\n  canceledOn: (signal: AbortSignalWithPromise) => TaskInstance<T>;\n  token?: Record<string, any>;\n\n  // Concurrency\n  isDropped: boolean;\n  isEnqueued: boolean;\n\n  // Data State\n  value: T | null;\n  error: any | null;\n\n  // Promise-like stuff\n  _shouldThrow: boolean;\n  _canAbort: boolean;\n  _deferredObject: DeferredObject<T>;\n  _handled: boolean; // this is needed to set to true so that Vue does not show error about unhandled rejection\n  then: (onfulfilled: onFulfilled<T>, onrejected?: onRejected) => Promise<any>;\n  catch: (onrejected?: onRejected) => any;\n  finally: (onfulfilled: () => any) => any;\n}\n\nexport interface ModifierOptions {\n  drop: boolean;\n  enqueue: boolean;\n}\n\nexport interface TaskInstanceOptions {\n  id: number;\n  scope: EffectScope,\n  modifiers: ModifierOptions;\n  onFinish: (taskInstance: TaskInstance<any>) => any;\n}\n\nexport default function createTaskInstance<T>(\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): TaskInstance<T> {\n  // Initial State\n  const content = _reactiveContent({\n    id: options.id,\n    isDropped: false,\n    isEnqueued: false,\n\n    hasStarted: false,\n    isRunning: false,\n    isFinished: false,\n    isCanceling: false,\n    isCanceled: computed(\n      () => taskInstance.isCanceling && taskInstance.isFinished\n    ),\n    isActive: computed(\n      () => taskInstance.isRunning && !taskInstance.isCanceling\n    ),\n    isSuccessful: false,\n    isNotDropped: computed(() => !taskInstance.isDropped),\n    isError: computed(() => !!taskInstance.error),\n    status: computed(() => {\n      const t = taskInstance;\n      const match = [\n        [t.isRunning, \"running\"],\n        [t.isEnqueued, \"enqueued\"],\n        [t.isCanceled, \"canceled\"],\n        [t.isCanceling, \"canceling\"],\n        [t.isDropped, \"dropped\"],\n        [t.isError, \"error\"],\n        [t.isSuccessful, \"success\"],\n      ].find(([cond]) => cond) as [boolean, TaskInstanceStatus];\n      return match && match[1];\n    }),\n\n    error: null,\n    value: null,\n    cancel({ force } = { force: false }) {\n      if (!force) {\n        taskInstance.isCanceling = true;\n\n        if (taskInstance.isEnqueued) {\n          taskInstance.isFinished = true;\n        }\n\n        taskInstance.isEnqueued = false;\n      }\n\n      if (taskInstance.token && taskInstance._canAbort) {\n        taskInstance.token.abort(\"cancel\");\n        try {\n          taskInstance.token.discard();\n        } catch (e) {\n          // this can cause an error where AbortSignal cannot be changed\n          // perhaps browsers consider it to be immutable\n          // all in all, failed token discard is no big deal, the memory saved is not that big\n        }\n        taskInstance.token = undefined;\n        taskInstance._canAbort = false;\n      }\n    },\n    canceledOn(signal: AbortSignalWithPromise) {\n      signal.pr.catch((e) => {\n        taskInstance.cancel();\n      });\n\n      return taskInstance;\n    },\n    _run() {\n      runTaskInstance(taskInstance, cb, params, options);\n    },\n\n    // PromiseLike things. These are necessary so that TaskInstance is `then`able and can be `await`ed\n\n    // Workaround for Vue not to scream because of unhandled rejection. Task is always \"handled\" because the error is saved to taskInstance.error.\n    _handled: true,\n    _deferredObject: defer<T>(),\n    _shouldThrow: false, // task throws only if it's used promise-like way (then, catch, await)\n    _canAbort: true,\n    then(onFulfilled, onRejected) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.then(onFulfilled, onRejected);\n    },\n    catch(onRejected, shouldThrow = true) {\n      taskInstance._shouldThrow = shouldThrow;\n      return taskInstance._deferredObject.promise.catch(onRejected);\n    },\n    finally(cb) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.finally(cb);\n    },\n  });\n\n  // Create\n  const taskInstance = _reactive(content) as TaskInstance<T>;\n\n  // Process = drop, enqueue or run right away!\n  const { modifiers } = options;\n  if (modifiers.drop) {\n    taskInstance.isDropped = true;\n  } else if (modifiers.enqueue) {\n    taskInstance.isEnqueued = true;\n  } else {\n    taskInstance._run();\n  }\n\n  return taskInstance;\n}\n\nfunction runTaskInstance<T>(\n  taskInstance: TaskInstance<any>,\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): void {\n  // because not all environemnts support package.exports field (TS, WP4 and others), it's necessary to look for CAF function in two places\n  const token = new cancelToken();\n  const cancelable = CAF(cb, token);\n  taskInstance.token = token;\n\n  taskInstance.hasStarted = true;\n  taskInstance.isRunning = true;\n  taskInstance.isEnqueued = false;\n\n  function setFinished() {\n    taskInstance.isRunning = false;\n    taskInstance.isFinished = true;\n  }\n\n  cancelable\n    .call(taskInstance, token, ...params)\n    .then((value) => {\n      taskInstance.value = value;\n      taskInstance.isSuccessful = true;\n\n      setFinished();\n      taskInstance._deferredObject.resolve(value);\n      taskInstance._canAbort = false;\n      options.onFinish(taskInstance);\n    })\n    .catch((e) => {\n      if (e !== \"cancel\") {\n        taskInstance.error = e;\n      }\n\n      setFinished();\n      if (taskInstance._shouldThrow) {\n        taskInstance._deferredObject.reject(e);\n      }\n      options.onFinish(taskInstance);\n    });\n}\n","import { computed, onBeforeUnmount, getCurrentInstance, effectScope, EffectScope } from \"./utils/api\";\nimport createTaskInstance, {\n  TaskInstance,\n  ModifierOptions,\n} from \"./TaskInstance\";\nimport {\n  reachedMaxConcurrency,\n  cancelFirstRunning,\n  filteredInstances,\n  computedLength,\n  computedLastOf,\n  computedFirstOf,\n  _reactive,\n  _reactiveContent,\n  dropEnqueued,\n} from \"./utils/general\";\nimport { Resolved, TaskCb } from \"./types/index\";\n\nexport type Task<T, U extends any[]> = {\n  // Lifecycle state\n  isIdle: boolean;\n  isRunning: boolean;\n  isError: boolean;\n  performCount: number;\n\n  // Shortcuts to useful instances\n  last: TaskInstance<T> | undefined;\n  lastSuccessful: TaskInstance<T> | undefined;\n  firstEnqueued: TaskInstance<T> | undefined;\n\n  // Action Methods\n  cancelAll: (options?: { force: boolean }) => void;\n  perform: (...params: U) => TaskInstance<T>;\n  clear: () => void;\n  destroy: () => void;\n\n  // Modifiers\n  restartable: () => Task<T, U>;\n  drop: () => Task<T, U>;\n  enqueue: () => Task<T, U>;\n  keepLatest: () => Task<T, U>;\n  maxConcurrency: (number) => Task<T, U>;\n  _resetModifierFlags: () => void;\n\n  // Modifier flags\n  _maxConcurrency: number;\n  _isRestartable: boolean;\n  _isEnqueuing: boolean;\n  _isDropping: boolean;\n  _isKeepingLatest: boolean;\n\n  _hasConcurrency: boolean;\n\n  // Instances\n  _instances: TaskInstance<T>[];\n  _successfulInstances: readonly TaskInstance<T>[];\n  _runningInstances: readonly TaskInstance<T>[];\n  _activeInstances: readonly TaskInstance<T>[];\n  _enqueuedInstances: readonly TaskInstance<T>[];\n  _notDroppedInstances: readonly TaskInstance<T>[];\n};\n\nexport default function useTask<T, U extends any[]>(\n  cb: TaskCb<T, U>,\n  options = { cancelOnUnmount: true }\n): Task<Resolved<T>, U> {\n  const vm = getCurrentInstance();\n  const scope = effectScope();\n  const content = _reactiveContent({\n    _isRestartable: false,\n    _isDropping: false,\n    _isEnqueuing: false,\n    _isKeepingLatest: false,\n    _maxConcurrency: 1, // this is used only when concurrency modifier is active (otherwise it has no effect)\n    _hasConcurrency: computed(\n      () =>\n        task._isRestartable ||\n        task._isDropping ||\n        task._isEnqueuing ||\n        task._isKeepingLatest\n    ),\n\n    isIdle: computed(() => !task.isRunning),\n    isRunning: computed(\n      () => !!task._instances.find((instance) => instance.isRunning)\n    ),\n    isError: computed(() => !!(task.last && task.last.isError)),\n\n    _instances: [],\n    // TODO: the filter + lastOf combo is concise and clear, but more efficient would be classic loop and iterating from the end (findLastIf macro)\n    _successfulInstances: filteredInstances(() => task, \"isSuccessful\"),\n    _runningInstances: filteredInstances(() => task, \"isRunning\"),\n    _enqueuedInstances: filteredInstances(() => task, \"isEnqueued\"),\n    _notDroppedInstances: filteredInstances(() => task, \"isNotDropped\"),\n    _activeInstances: filteredInstances(() => task, \"isActive\"),\n    performCount: computedLength(() => task._instances),\n    last: computedLastOf(() => task._notDroppedInstances),\n    lastSuccessful: computedLastOf(() => task._successfulInstances),\n    firstEnqueued: computedFirstOf(() => task._enqueuedInstances),\n\n    cancelAll({ force } = { force: false }) {\n      // Cancel all running and enqueued instances. Finished and dropped instances can't really be canceled.\n      task._instances.forEach(\n        (taskInstance) => {\n          try {\n            if (force || !taskInstance.isDropped && !taskInstance.isFinished) {\n              taskInstance.cancel({ force });\n            }\n          } catch (e) {\n            if (e !== \"cancel\") {\n              throw e;\n            }\n          }\n        }\n      );\n    },\n\n    perform(...params) {\n      const modifiers: ModifierOptions = {\n        enqueue: false,\n        drop: false,\n      };\n\n      if (task._hasConcurrency && reachedMaxConcurrency(task)) {\n        if (task._isDropping) {\n          modifiers.drop = true;\n        }\n\n        if (task._isRestartable) {\n          cancelFirstRunning(task);\n        }\n\n        if (task._isKeepingLatest) {\n          dropEnqueued(task);\n        }\n\n        if (task._isEnqueuing || task._isKeepingLatest) {\n          modifiers.enqueue = true;\n        }\n      }\n\n      const onFinish = () => onTaskInstanceFinish(task);\n      const create = () => createTaskInstance<T>(cb, params, {\n        modifiers,\n        onFinish,\n        scope: scope,\n        id: task._instances.length + 1,\n      });\n      // @ts-expect-error property is not exposed on types in Vue 2.7\n      const newInstance = scope.active ? scope.run(create) : create();\n      // @ts-expect-error\n      if (!scope.active) {\n        console.warn('Task instance has been created in inactive scope. Perhaps youre creating task out of setup?');\n      }\n      \n      task._instances = [...task._instances, newInstance as TaskInstance<T>];\n\n      return newInstance;\n    },\n\n    clear() {\n      this.cancelAll({ force: true });\n      this._instances = [];\n    },\n\n    destroy() {\n      scope.stop();\n      this.clear();\n    },\n\n    restartable() {\n      task._resetModifierFlags();\n      task._isRestartable = true;\n      return task;\n    },\n\n    drop() {\n      task._resetModifierFlags();\n      task._isDropping = true;\n      return task;\n    },\n\n    enqueue() {\n      task._resetModifierFlags();\n      task._isEnqueuing = true;\n      return task;\n    },\n\n    keepLatest() {\n      task._resetModifierFlags();\n      task._isKeepingLatest = true;\n      return task;\n    },\n\n    _resetModifierFlags() {\n      task._isKeepingLatest = false;\n      task._isRestartable = false;\n      task._isEnqueuing = false;\n      task._isDropping = false;\n    },\n\n    maxConcurrency(number) {\n      task._maxConcurrency = number;\n      return task;\n    },\n  });\n  const task = _reactive(content) as Task<T, U>;\n\n  if (vm && options.cancelOnUnmount) {\n    onBeforeUnmount(() => {\n      // check if there's instances still, Vue 3 might have done some cleanup already\n      if (task._instances) {\n        // cancelAll with force is more performant is theres less need for checks\n        task.destroy();\n      }\n    });\n  }\n\n  return task as Task<Resolved<T>, U>;\n}\n\nfunction onTaskInstanceFinish(task: Task<any, any>): void {\n  if (task._isEnqueuing || task._isKeepingLatest) {\n    const { firstEnqueued } = task;\n    if (firstEnqueued) {\n      firstEnqueued._run();\n    }\n  }\n}\n","import {\n  onServerPrefetch,\n  getCurrentInstance,\n  computed,\n} from \"./api\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { Task } from \"../Task\";\n\nconst isServer = () => typeof window === \"undefined\";\n\nexport function reviveTaskInstance(instance: TaskInstance<any>) {\n  if (instance.isError) {\n    instance._deferredObject.promise = Promise.reject(instance.error);\n  } else {\n    instance._deferredObject.promise = Promise.resolve(instance.value);\n  }\n\n  instance.cancel = () => { };\n  instance.canceledOn = () => instance;\n  instance._run = () => { };\n  instance.then = (...params) =>\n    instance._deferredObject.promise.then(...params);\n  instance.catch = (...params) =>\n    instance._deferredObject.promise.catch(...params);\n  instance.finally = (...params) =>\n    instance._deferredObject.promise.finally(...params);\n}\n\nexport function useTaskPrefetch<T>(\n  key: string,\n  task: Task<T, any>\n): TaskInstance<T> {\n  /* Server */\n  if (isServer()) {\n    // perform, add to prefetch, add to ssrContext\n    const taskInstance = task.perform();\n    onServerPrefetch(async () => {\n      try {\n        await taskInstance;\n        saveTaskToNuxtState(key, task);\n      } catch (e) {\n        // no need for extra handling\n      }\n    });\n    return taskInstance;\n  }\n\n  /* Client */\n  const [last] = reviveTaskInstances(key, task).reverse();\n\n  if (last) {\n    return last;\n  } else {\n    return task.perform();\n  }\n}\n\nfunction saveTaskToNuxtState(key: string, task: Task<any, any>) {\n  const { $root } = getCurrentInstance() as any;\n  const nuxtState = $root && $root.context && $root.context.nuxtState;\n  if (!nuxtState) {\n    throw new Error(\"Could not access $root.context.nuxtState\");\n  }\n\n  if (!nuxtState.vueConcurrency) {\n    nuxtState.vueConcurrency = {};\n  }\n\n  nuxtState.vueConcurrency[key] = computed(() => ({\n    instances: task._instances,\n  }));\n}\n\nfunction reviveTaskInstances(key: string, task: Task<any, any>) {\n  const taskCache = getTaskFromContext(key);\n  if (taskCache) {\n    task._instances = taskCache.instances || [];\n    task._instances.forEach(reviveTaskInstance);\n    deleteTaskCache(key);\n  }\n\n  return task._instances;\n}\n\nfunction getNuxtData() {\n  return (window as any).__NUXT__;\n}\n\nfunction getTaskFromContext(key) {\n  if (!getNuxtData()) {\n    throw Error(`Could not access  window.__NUXT__`);\n  }\n\n  return getNuxtData().vueConcurrency[key].value;\n}\n\nfunction deleteTaskCache(key) {\n  const nuxtData = getNuxtData();\n  delete nuxtData.vueConcurrency[key];\n}\n\nexport function useSSRPersistance(key: string, task: Task<any, any>) {\n  if (isServer()) {\n    saveTaskToNuxtState(key, task);\n    return;\n  }\n\n  reviveTaskInstances(key, task);\n}\n","import useTask, { Task } from \"./Task\";\n\nexport function usePipeTask<T, U extends any[]>(\n  firstTask: Task<any, U>,\n  ...restTasks: Task<any, any>[]\n): Task<T, U> {\n  return useTask(function*(signal, ...args: U) {\n    let result = yield firstTask.perform(...args).canceledOn(signal);\n    for (let task of restTasks) {\n      result = yield task.perform(result).canceledOn(signal);\n    }\n\n    return result;\n  });\n}\n\nexport function useParallelTask(...tasks: Task<any, any>[]): Task<any[], any> {\n  return useTask(function*(signal, ...args) {\n    const instances = tasks.map((task) => {\n      return task.perform(...args).canceledOn(signal);\n    });\n\n    const values = yield Promise.all(instances);\n    return values as any[];\n  });\n}\n\nexport function useSequentialTask<U extends any[]>(\n  ...tasks: Task<any, any>[]\n): Task<any, U> {\n  return useTask(function*(signal, ...args: U) {\n    const instances: any[] = [];\n    for (let task of tasks) {\n      instances.push((yield task.perform(...args).canceledOn(signal)) as any);\n    }\n\n    return instances;\n  });\n}\n","import { Task } from \"./Task\";\nimport { reactive, computed } from \"./utils/api\";\n\nexport interface TaskState {\n  isRunning: boolean;\n  isIdle: boolean;\n}\n\nexport type TaskGroup<U extends Record<string, Task<any, any>>> = TaskState & U;\n\nexport default function useTaskGroup<U extends Record<string, Task<any, any>>>(\n  taskMap: U\n): TaskGroup<U> {\n  const taskArray = Object.values(taskMap);\n  const taskGroup = reactive({\n    isRunning: computed(() => !!taskArray.find((task) => task.isRunning)),\n    isIdle: computed(() => !taskGroup.isRunning),\n    isError: computed(() => !!taskArray.find((task) => task.isError)),\n    ...taskMap,\n  });\n\n  return taskGroup;\n}\n"],"names":["reachedMaxConcurrency","task","_runningInstances","length","_maxConcurrency","cancelFirstRunning","firstRunningInstance","_activeInstances","cancel","_enqueuedInstances","forEach","instance","isEnqueued","isDropped","filteredInstances","cb","key","value","computed","filter","item","computedFilterBy","_instances","computedLastOf","collection","computedFirstOf","_reactive","obj","reactive","createTaskInstance","params","options","deferredObject","content","id","hasStarted","isRunning","isFinished","isCanceling","isCanceled","taskInstance","isActive","isSuccessful","isNotDropped","isError","error","status","find","_ref","match","_temp","force","token","_canAbort","abort","discard","e","undefined","canceledOn","signal","pr","_run","cancelToken","cancelable","CAF","setFinished","call","apply","then","_deferredObject","resolve","onFinish","_shouldThrow","reject","runTaskInstance","_handled","Promise","promise","onFulfilled","onRejected","shouldThrow","modifiers","drop","enqueue","useTask","cancelOnUnmount","getCurrentInstance","effectScope","_isRestartable","_isDropping","_isEnqueuing","_isKeepingLatest","_hasConcurrency","isIdle","last","_successfulInstances","_notDroppedInstances","performCount","computedLength","lastSuccessful","firstEnqueued","cancelAll","perform","_arguments","arguments","dropEnqueued","onTaskInstanceFinish","create","slice","scope","active","run","console","warn","concat","newInstance","clear","this","destroy","stop","restartable","_resetModifierFlags","keepLatest","maxConcurrency","number","vm","onBeforeUnmount","isServer","window","_instance$_deferredOb","_instance$_deferredOb2","_instance$_deferredOb3","saveTaskToNuxtState","$root","nuxtState","context","vueConcurrency","instances","reviveTaskInstances","taskCache","getNuxtData","Error","getTaskFromContext","reviveTaskInstance","deleteTaskCache","__NUXT__","axios","CancelToken","reason","printTask","taskType","header","instanceRows","map","colorEmoji","log","table","timeout","time","process","env","NODE_ENV","setTimeout","useAsyncTask","fn","_regeneratorRuntime","mark","_callee","_args","tasks","_context2","next","all","values","_callee2","usePipeTask","firstTask","restTasks","result","_iterator","_step","wrap","_context","prev","done","useSequentialTask","_iterator2","_createForOfIteratorHelperLoose","_step2","_context3","push","taskMap","taskArray","Object","taskGroup","onServerPrefetch","_temp2","_catch","reverse","waitForValue","watch","immediate"],"mappings":"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"}