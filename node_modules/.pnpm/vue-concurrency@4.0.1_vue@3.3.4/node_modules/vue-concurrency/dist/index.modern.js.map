{"version":3,"file":"index.modern.js","sources":["../src/utils/general.ts","../src/Task.ts","../src/TaskInstance.ts","../src/wrap-utils.ts","../src/utils/ssr-utils.ts","../src/TaskGroup.ts"],"sourcesContent":["import { computed, Ref, watch, reactive } from \"./api\";\nimport useTask, { Task } from \"../Task\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { AbortSignalWithPromise } from \"../types/index\";\n\nexport function waitForValue<T = any>(cb: () => T): Promise<T> {\n  return new Promise((resolve) => {\n    const stop = watch(cb, value => {\n      if (value !== undefined && value !== null) {\n        resolve(value);\n        stop && stop();\n      }\n    }, { immediate: true });\n  });\n}\n\nexport const reachedMaxConcurrency = (task: Task<any, any>): boolean =>\n  task._runningInstances.length >= task._maxConcurrency;\n\nexport const cancelFirstRunning = (task: Task<any, any>): void => {\n  const firstRunningInstance = task._activeInstances[0];\n  if (firstRunningInstance) {\n    firstRunningInstance.cancel();\n  }\n};\n\nexport const dropEnqueued = (task: Task<any, any>): void => {\n  task._enqueuedInstances.forEach((instance) => {\n    instance.isEnqueued = false;\n    instance.isDropped = true;\n  });\n};\n\ntype BooleanKeys<T> = {\n  [k in keyof T]: T[k] extends boolean ? k : never;\n}[keyof T];\n\nexport function filteredInstances(\n  cb: () => Task<any, any>,\n  key: BooleanKeys<TaskInstance<any>>\n) {\n  if (!key) {\n    return computed(() => []);\n  }\n\n  return computedFilterBy(() => cb()._instances, key);\n}\n\nfunction computedFilterBy<T>(cb: () => T[], key: keyof T, value?: any) {\n  return computed(() => {\n    const collection = cb();\n    return collection.filter((item) => {\n      const curr = item[key];\n      if (value) {\n        return curr === value;\n      }\n\n      return curr;\n    });\n  });\n}\n\nexport function computedLength(cb: () => any[]): Readonly<Ref<number>> {\n  return computed(() => {\n    const arr = cb();\n    return arr.length;\n  });\n}\n\nexport function computedLastOf<T>(cb: () => readonly T[]): Ref<T | undefined> {\n  return computed(() => {\n    const collection = cb();\n    return collection[collection.length - 1];\n  });\n}\n\nexport function computedFirstOf<T>(\n  cb: () => readonly T[]\n): Readonly<Ref<T | undefined>> {\n  return computed(() => {\n    const collection = cb();\n    return collection[0];\n  });\n}\n\nexport type Reactive<T> = {\n  [K in keyof T]: T[K] extends Ref<infer U> ? U : T[K];\n};\n\nexport const _reactiveContent = <T>(obj: T) => {\n  return obj as Reactive<T>;\n};\n\nexport function _reactive<T extends object>(obj: T) {\n  return reactive(obj) as T;\n}\n\nexport type DeferredObject<T> = {\n  promise: Promise<T>;\n  resolve: Function;\n  reject: Function;\n};\nexport function defer<T>(): DeferredObject<T> {\n  const deferredObject: Record<string, any> = {};\n  const promise = new Promise((resolve, reject) => {\n    deferredObject.resolve = resolve;\n    deferredObject.reject = reject;\n  });\n  deferredObject.promise = promise as Promise<T>;\n\n  return deferredObject as DeferredObject<T>;\n}\n\nexport function printTask(task: Task<any, any>) {\n  let taskType = \"General\";\n\n  if (task._isDropping) {\n    taskType = \"Drop\";\n  }\n\n  if (task._isEnqueuing) {\n    taskType = \"Enqueue\";\n  }\n\n  if (task._isRestartable) {\n    taskType = \"Restartable\";\n  }\n\n  if (task._isKeepingLatest) {\n    taskType = \"KeepLatest\";\n  }\n\n  let header = `${taskType} Task`;\n\n  if (taskType !== \"General\") {\n    header = `${header} with maxConcurrency ${task._maxConcurrency}`;\n  }\n\n  const instanceRows = task._instances.map((instance) => {\n    let colorEmoji;\n\n    if (instance.isSuccessful) {\n      colorEmoji = \"🍏\";\n    } else if (instance.isRunning || instance.isEnqueued) {\n      colorEmoji = \"🍊\";\n    } else if (instance.isError || instance.isCanceled || instance.isDropped) {\n      colorEmoji = \"🔴\";\n    }\n\n    const { status, value, error } = instance;\n    return { status: `${colorEmoji} ${status}`, value, error };\n  });\n\n  console.log(`🚦 ${header}`);\n  console.table(instanceRows);\n}\n\nexport function timeout(time) {\n  if (process.env.NODE_ENV === \"test\") {\n    return Promise.resolve();\n  }\n\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport function getCancelToken<T extends { CancelToken: any }>(\n  axios: T,\n  signal: AbortSignalWithPromise\n) {\n  return new axios.CancelToken((cancel) => {\n    signal.pr.catch((reason) => {\n      if (reason === \"cancel\") {\n        cancel();\n      }\n    });\n  });\n}\n\nexport function useAsyncTask<T, U extends any[]>(\n  fn: (signal: AbortSignalWithPromise, ...params: U) => Promise<T>\n) {\n  return useTask(function* (signal, ...params: U) {\n    return fn(signal, ...params);\n  });\n}\n","import { computed, onBeforeUnmount, getCurrentInstance, effectScope, EffectScope } from \"./utils/api\";\nimport createTaskInstance, {\n  TaskInstance,\n  ModifierOptions,\n} from \"./TaskInstance\";\nimport {\n  reachedMaxConcurrency,\n  cancelFirstRunning,\n  filteredInstances,\n  computedLength,\n  computedLastOf,\n  computedFirstOf,\n  _reactive,\n  _reactiveContent,\n  dropEnqueued,\n} from \"./utils/general\";\nimport { Resolved, TaskCb } from \"./types/index\";\n\nexport type Task<T, U extends any[]> = {\n  // Lifecycle state\n  isIdle: boolean;\n  isRunning: boolean;\n  isError: boolean;\n  performCount: number;\n\n  // Shortcuts to useful instances\n  last: TaskInstance<T> | undefined;\n  lastSuccessful: TaskInstance<T> | undefined;\n  firstEnqueued: TaskInstance<T> | undefined;\n\n  // Action Methods\n  cancelAll: (options?: { force: boolean }) => void;\n  perform: (...params: U) => TaskInstance<T>;\n  clear: () => void;\n  destroy: () => void;\n\n  // Modifiers\n  restartable: () => Task<T, U>;\n  drop: () => Task<T, U>;\n  enqueue: () => Task<T, U>;\n  keepLatest: () => Task<T, U>;\n  maxConcurrency: (number) => Task<T, U>;\n  _resetModifierFlags: () => void;\n\n  // Modifier flags\n  _maxConcurrency: number;\n  _isRestartable: boolean;\n  _isEnqueuing: boolean;\n  _isDropping: boolean;\n  _isKeepingLatest: boolean;\n\n  _hasConcurrency: boolean;\n\n  // Instances\n  _instances: TaskInstance<T>[];\n  _successfulInstances: readonly TaskInstance<T>[];\n  _runningInstances: readonly TaskInstance<T>[];\n  _activeInstances: readonly TaskInstance<T>[];\n  _enqueuedInstances: readonly TaskInstance<T>[];\n  _notDroppedInstances: readonly TaskInstance<T>[];\n};\n\nexport default function useTask<T, U extends any[]>(\n  cb: TaskCb<T, U>,\n  options = { cancelOnUnmount: true }\n): Task<Resolved<T>, U> {\n  const vm = getCurrentInstance();\n  const scope = effectScope();\n  const content = _reactiveContent({\n    _isRestartable: false,\n    _isDropping: false,\n    _isEnqueuing: false,\n    _isKeepingLatest: false,\n    _maxConcurrency: 1, // this is used only when concurrency modifier is active (otherwise it has no effect)\n    _hasConcurrency: computed(\n      () =>\n        task._isRestartable ||\n        task._isDropping ||\n        task._isEnqueuing ||\n        task._isKeepingLatest\n    ),\n\n    isIdle: computed(() => !task.isRunning),\n    isRunning: computed(\n      () => !!task._instances.find((instance) => instance.isRunning)\n    ),\n    isError: computed(() => !!(task.last && task.last.isError)),\n\n    _instances: [],\n    // TODO: the filter + lastOf combo is concise and clear, but more efficient would be classic loop and iterating from the end (findLastIf macro)\n    _successfulInstances: filteredInstances(() => task, \"isSuccessful\"),\n    _runningInstances: filteredInstances(() => task, \"isRunning\"),\n    _enqueuedInstances: filteredInstances(() => task, \"isEnqueued\"),\n    _notDroppedInstances: filteredInstances(() => task, \"isNotDropped\"),\n    _activeInstances: filteredInstances(() => task, \"isActive\"),\n    performCount: computedLength(() => task._instances),\n    last: computedLastOf(() => task._notDroppedInstances),\n    lastSuccessful: computedLastOf(() => task._successfulInstances),\n    firstEnqueued: computedFirstOf(() => task._enqueuedInstances),\n\n    cancelAll({ force } = { force: false }) {\n      // Cancel all running and enqueued instances. Finished and dropped instances can't really be canceled.\n      task._instances.forEach(\n        (taskInstance) => {\n          try {\n            if (force || !taskInstance.isDropped && !taskInstance.isFinished) {\n              taskInstance.cancel({ force });\n            }\n          } catch (e) {\n            if (e !== \"cancel\") {\n              throw e;\n            }\n          }\n        }\n      );\n    },\n\n    perform(...params) {\n      const modifiers: ModifierOptions = {\n        enqueue: false,\n        drop: false,\n      };\n\n      if (task._hasConcurrency && reachedMaxConcurrency(task)) {\n        if (task._isDropping) {\n          modifiers.drop = true;\n        }\n\n        if (task._isRestartable) {\n          cancelFirstRunning(task);\n        }\n\n        if (task._isKeepingLatest) {\n          dropEnqueued(task);\n        }\n\n        if (task._isEnqueuing || task._isKeepingLatest) {\n          modifiers.enqueue = true;\n        }\n      }\n\n      const onFinish = () => onTaskInstanceFinish(task);\n      const create = () => createTaskInstance<T>(cb, params, {\n        modifiers,\n        onFinish,\n        scope: scope,\n        id: task._instances.length + 1,\n      });\n      // @ts-expect-error property is not exposed on types in Vue 2.7\n      const newInstance = scope.active ? scope.run(create) : create();\n      // @ts-expect-error\n      if (!scope.active) {\n        console.warn('Task instance has been created in inactive scope. Perhaps youre creating task out of setup?');\n      }\n      \n      task._instances = [...task._instances, newInstance as TaskInstance<T>];\n\n      return newInstance;\n    },\n\n    clear() {\n      this.cancelAll({ force: true });\n      this._instances = [];\n    },\n\n    destroy() {\n      scope.stop();\n      this.clear();\n    },\n\n    restartable() {\n      task._resetModifierFlags();\n      task._isRestartable = true;\n      return task;\n    },\n\n    drop() {\n      task._resetModifierFlags();\n      task._isDropping = true;\n      return task;\n    },\n\n    enqueue() {\n      task._resetModifierFlags();\n      task._isEnqueuing = true;\n      return task;\n    },\n\n    keepLatest() {\n      task._resetModifierFlags();\n      task._isKeepingLatest = true;\n      return task;\n    },\n\n    _resetModifierFlags() {\n      task._isKeepingLatest = false;\n      task._isRestartable = false;\n      task._isEnqueuing = false;\n      task._isDropping = false;\n    },\n\n    maxConcurrency(number) {\n      task._maxConcurrency = number;\n      return task;\n    },\n  });\n  const task = _reactive(content) as Task<T, U>;\n\n  if (vm && options.cancelOnUnmount) {\n    onBeforeUnmount(() => {\n      // check if there's instances still, Vue 3 might have done some cleanup already\n      if (task._instances) {\n        // cancelAll with force is more performant is theres less need for checks\n        task.destroy();\n      }\n    });\n  }\n\n  return task as Task<Resolved<T>, U>;\n}\n\nfunction onTaskInstanceFinish(task: Task<any, any>): void {\n  if (task._isEnqueuing || task._isKeepingLatest) {\n    const { firstEnqueued } = task;\n    if (firstEnqueued) {\n      firstEnqueued._run();\n    }\n  }\n}\n","\nimport CAF, { cancelToken } from \"caf\";\nimport { computed, EffectScope } from \"./utils/api\";\nimport { _reactive, _reactiveContent, DeferredObject, defer } from \"./utils/general\";\nimport {\n  AbortSignalWithPromise,\n  TaskCb,\n  onFulfilled,\n  onRejected,\n} from \"./types/index\";\n\nexport type TaskInstanceStatus =\n  | \"running\"\n  | \"enqueued\"\n  | \"canceled\"\n  | \"canceling\"\n  | \"dropped\"\n  | \"error\"\n  | \"success\";\nexport interface TaskInstance<T> extends PromiseLike<T> {\n  id: number;\n\n  // Lifecycle\n  hasStarted: boolean;\n  isRunning: boolean;\n  isActive: boolean;\n  isFinished: boolean;\n  isError: boolean;\n  isSuccessful: boolean;\n\n  isCanceling: boolean;\n  isCanceled: boolean;\n\n  isNotDropped: boolean;\n  status: TaskInstanceStatus;\n\n  _run: () => void;\n  cancel: (options?: { force: boolean }) => void;\n  canceledOn: (signal: AbortSignalWithPromise) => TaskInstance<T>;\n  token?: Record<string, any>;\n\n  // Concurrency\n  isDropped: boolean;\n  isEnqueued: boolean;\n\n  // Data State\n  value: T | null;\n  error: any | null;\n\n  // Promise-like stuff\n  _shouldThrow: boolean;\n  _canAbort: boolean;\n  _deferredObject: DeferredObject<T>;\n  _handled: boolean; // this is needed to set to true so that Vue does not show error about unhandled rejection\n  then: (onfulfilled: onFulfilled<T>, onrejected?: onRejected) => Promise<any>;\n  catch: (onrejected?: onRejected) => any;\n  finally: (onfulfilled: () => any) => any;\n}\n\nexport interface ModifierOptions {\n  drop: boolean;\n  enqueue: boolean;\n}\n\nexport interface TaskInstanceOptions {\n  id: number;\n  scope: EffectScope,\n  modifiers: ModifierOptions;\n  onFinish: (taskInstance: TaskInstance<any>) => any;\n}\n\nexport default function createTaskInstance<T>(\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): TaskInstance<T> {\n  // Initial State\n  const content = _reactiveContent({\n    id: options.id,\n    isDropped: false,\n    isEnqueued: false,\n\n    hasStarted: false,\n    isRunning: false,\n    isFinished: false,\n    isCanceling: false,\n    isCanceled: computed(\n      () => taskInstance.isCanceling && taskInstance.isFinished\n    ),\n    isActive: computed(\n      () => taskInstance.isRunning && !taskInstance.isCanceling\n    ),\n    isSuccessful: false,\n    isNotDropped: computed(() => !taskInstance.isDropped),\n    isError: computed(() => !!taskInstance.error),\n    status: computed(() => {\n      const t = taskInstance;\n      const match = [\n        [t.isRunning, \"running\"],\n        [t.isEnqueued, \"enqueued\"],\n        [t.isCanceled, \"canceled\"],\n        [t.isCanceling, \"canceling\"],\n        [t.isDropped, \"dropped\"],\n        [t.isError, \"error\"],\n        [t.isSuccessful, \"success\"],\n      ].find(([cond]) => cond) as [boolean, TaskInstanceStatus];\n      return match && match[1];\n    }),\n\n    error: null,\n    value: null,\n    cancel({ force } = { force: false }) {\n      if (!force) {\n        taskInstance.isCanceling = true;\n\n        if (taskInstance.isEnqueued) {\n          taskInstance.isFinished = true;\n        }\n\n        taskInstance.isEnqueued = false;\n      }\n\n      if (taskInstance.token && taskInstance._canAbort) {\n        taskInstance.token.abort(\"cancel\");\n        try {\n          taskInstance.token.discard();\n        } catch (e) {\n          // this can cause an error where AbortSignal cannot be changed\n          // perhaps browsers consider it to be immutable\n          // all in all, failed token discard is no big deal, the memory saved is not that big\n        }\n        taskInstance.token = undefined;\n        taskInstance._canAbort = false;\n      }\n    },\n    canceledOn(signal: AbortSignalWithPromise) {\n      signal.pr.catch((e) => {\n        taskInstance.cancel();\n      });\n\n      return taskInstance;\n    },\n    _run() {\n      runTaskInstance(taskInstance, cb, params, options);\n    },\n\n    // PromiseLike things. These are necessary so that TaskInstance is `then`able and can be `await`ed\n\n    // Workaround for Vue not to scream because of unhandled rejection. Task is always \"handled\" because the error is saved to taskInstance.error.\n    _handled: true,\n    _deferredObject: defer<T>(),\n    _shouldThrow: false, // task throws only if it's used promise-like way (then, catch, await)\n    _canAbort: true,\n    then(onFulfilled, onRejected) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.then(onFulfilled, onRejected);\n    },\n    catch(onRejected, shouldThrow = true) {\n      taskInstance._shouldThrow = shouldThrow;\n      return taskInstance._deferredObject.promise.catch(onRejected);\n    },\n    finally(cb) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.finally(cb);\n    },\n  });\n\n  // Create\n  const taskInstance = _reactive(content) as TaskInstance<T>;\n\n  // Process = drop, enqueue or run right away!\n  const { modifiers } = options;\n  if (modifiers.drop) {\n    taskInstance.isDropped = true;\n  } else if (modifiers.enqueue) {\n    taskInstance.isEnqueued = true;\n  } else {\n    taskInstance._run();\n  }\n\n  return taskInstance;\n}\n\nfunction runTaskInstance<T>(\n  taskInstance: TaskInstance<any>,\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): void {\n  // because not all environemnts support package.exports field (TS, WP4 and others), it's necessary to look for CAF function in two places\n  const token = new cancelToken();\n  const cancelable = CAF(cb, token);\n  taskInstance.token = token;\n\n  taskInstance.hasStarted = true;\n  taskInstance.isRunning = true;\n  taskInstance.isEnqueued = false;\n\n  function setFinished() {\n    taskInstance.isRunning = false;\n    taskInstance.isFinished = true;\n  }\n\n  cancelable\n    .call(taskInstance, token, ...params)\n    .then((value) => {\n      taskInstance.value = value;\n      taskInstance.isSuccessful = true;\n\n      setFinished();\n      taskInstance._deferredObject.resolve(value);\n      taskInstance._canAbort = false;\n      options.onFinish(taskInstance);\n    })\n    .catch((e) => {\n      if (e !== \"cancel\") {\n        taskInstance.error = e;\n      }\n\n      setFinished();\n      if (taskInstance._shouldThrow) {\n        taskInstance._deferredObject.reject(e);\n      }\n      options.onFinish(taskInstance);\n    });\n}\n","import useTask, { Task } from \"./Task\";\n\nexport function usePipeTask<T, U extends any[]>(\n  firstTask: Task<any, U>,\n  ...restTasks: Task<any, any>[]\n): Task<T, U> {\n  return useTask(function*(signal, ...args: U) {\n    let result = yield firstTask.perform(...args).canceledOn(signal);\n    for (let task of restTasks) {\n      result = yield task.perform(result).canceledOn(signal);\n    }\n\n    return result;\n  });\n}\n\nexport function useParallelTask(...tasks: Task<any, any>[]): Task<any[], any> {\n  return useTask(function*(signal, ...args) {\n    const instances = tasks.map((task) => {\n      return task.perform(...args).canceledOn(signal);\n    });\n\n    const values = yield Promise.all(instances);\n    return values as any[];\n  });\n}\n\nexport function useSequentialTask<U extends any[]>(\n  ...tasks: Task<any, any>[]\n): Task<any, U> {\n  return useTask(function*(signal, ...args: U) {\n    const instances: any[] = [];\n    for (let task of tasks) {\n      instances.push((yield task.perform(...args).canceledOn(signal)) as any);\n    }\n\n    return instances;\n  });\n}\n","import {\n  onServerPrefetch,\n  getCurrentInstance,\n  computed,\n} from \"./api\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { Task } from \"../Task\";\n\nconst isServer = () => typeof window === \"undefined\";\n\nexport function reviveTaskInstance(instance: TaskInstance<any>) {\n  if (instance.isError) {\n    instance._deferredObject.promise = Promise.reject(instance.error);\n  } else {\n    instance._deferredObject.promise = Promise.resolve(instance.value);\n  }\n\n  instance.cancel = () => { };\n  instance.canceledOn = () => instance;\n  instance._run = () => { };\n  instance.then = (...params) =>\n    instance._deferredObject.promise.then(...params);\n  instance.catch = (...params) =>\n    instance._deferredObject.promise.catch(...params);\n  instance.finally = (...params) =>\n    instance._deferredObject.promise.finally(...params);\n}\n\nexport function useTaskPrefetch<T>(\n  key: string,\n  task: Task<T, any>\n): TaskInstance<T> {\n  /* Server */\n  if (isServer()) {\n    // perform, add to prefetch, add to ssrContext\n    const taskInstance = task.perform();\n    onServerPrefetch(async () => {\n      try {\n        await taskInstance;\n        saveTaskToNuxtState(key, task);\n      } catch (e) {\n        // no need for extra handling\n      }\n    });\n    return taskInstance;\n  }\n\n  /* Client */\n  const [last] = reviveTaskInstances(key, task).reverse();\n\n  if (last) {\n    return last;\n  } else {\n    return task.perform();\n  }\n}\n\nfunction saveTaskToNuxtState(key: string, task: Task<any, any>) {\n  const { $root } = getCurrentInstance() as any;\n  const nuxtState = $root && $root.context && $root.context.nuxtState;\n  if (!nuxtState) {\n    throw new Error(\"Could not access $root.context.nuxtState\");\n  }\n\n  if (!nuxtState.vueConcurrency) {\n    nuxtState.vueConcurrency = {};\n  }\n\n  nuxtState.vueConcurrency[key] = computed(() => ({\n    instances: task._instances,\n  }));\n}\n\nfunction reviveTaskInstances(key: string, task: Task<any, any>) {\n  const taskCache = getTaskFromContext(key);\n  if (taskCache) {\n    task._instances = taskCache.instances || [];\n    task._instances.forEach(reviveTaskInstance);\n    deleteTaskCache(key);\n  }\n\n  return task._instances;\n}\n\nfunction getNuxtData() {\n  return (window as any).__NUXT__;\n}\n\nfunction getTaskFromContext(key) {\n  if (!getNuxtData()) {\n    throw Error(`Could not access  window.__NUXT__`);\n  }\n\n  return getNuxtData().vueConcurrency[key].value;\n}\n\nfunction deleteTaskCache(key) {\n  const nuxtData = getNuxtData();\n  delete nuxtData.vueConcurrency[key];\n}\n\nexport function useSSRPersistance(key: string, task: Task<any, any>) {\n  if (isServer()) {\n    saveTaskToNuxtState(key, task);\n    return;\n  }\n\n  reviveTaskInstances(key, task);\n}\n","import { Task } from \"./Task\";\nimport { reactive, computed } from \"./utils/api\";\n\nexport interface TaskState {\n  isRunning: boolean;\n  isIdle: boolean;\n}\n\nexport type TaskGroup<U extends Record<string, Task<any, any>>> = TaskState & U;\n\nexport default function useTaskGroup<U extends Record<string, Task<any, any>>>(\n  taskMap: U\n): TaskGroup<U> {\n  const taskArray = Object.values(taskMap);\n  const taskGroup = reactive({\n    isRunning: computed(() => !!taskArray.find((task) => task.isRunning)),\n    isIdle: computed(() => !taskGroup.isRunning),\n    isError: computed(() => !!taskArray.find((task) => task.isError)),\n    ...taskMap,\n  });\n\n  return taskGroup;\n}\n"],"names":["cb","Promise","resolve","stop","watch","value","immediate","key","computed","filter","item","computedFilterBy","_instances","computedLength","length","computedLastOf","collection","_reactive","obj","reactive","defer","deferredObject","promise","reject","printTask","task","taskType","_isDropping","_isEnqueuing","_isRestartable","_isKeepingLatest","header","_maxConcurrency","instanceRows","map","instance","colorEmoji","isSuccessful","isRunning","isEnqueued","isError","isCanceled","isDropped","status","error","console","log","table","timeout","time","process","env","NODE_ENV","setTimeout","getCancelToken","axios","signal","CancelToken","cancel","pr","catch","reason","useAsyncTask","fn","useTask","params","options","cancelOnUnmount","vm","getCurrentInstance","effectScope","_hasConcurrency","isIdle","find","last","_successfulInstances","filteredInstances","_runningInstances","_enqueuedInstances","_notDroppedInstances","_activeInstances","performCount","lastSuccessful","firstEnqueued","computedFirstOf","cancelAll","force","forEach","taskInstance","isFinished","e","perform","modifiers","enqueue","drop","reachedMaxConcurrency","firstRunningInstance","cancelFirstRunning","dropEnqueued","onFinish","_run","onTaskInstanceFinish","createTaskInstance","content","id","hasStarted","isCanceling","isActive","isNotDropped","cond","match","token","_canAbort","abort","discard","undefined","canceledOn","cancelToken","cancelable","CAF","setFinished","call","then","_deferredObject","_shouldThrow","runTaskInstance","_handled","onFulfilled","onRejected","shouldThrow","finally","scope","newInstance","active","run","create","warn","clear","this","destroy","restartable","_resetModifierFlags","keepLatest","maxConcurrency","number","onBeforeUnmount","firstTask","restTasks","args","result","useParallelTask","tasks","all","instances","push","isServer","window","reviveTaskInstance","useTaskPrefetch","onServerPrefetch","async","saveTaskToNuxtState","reviveTaskInstances","reverse","$root","nuxtState","context","Error","vueConcurrency","taskCache","getNuxtData","getTaskFromContext","deleteTaskCache","__NUXT__","useTaskGroup","taskMap","taskArray","Object","values","taskGroup"],"mappings":"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"}