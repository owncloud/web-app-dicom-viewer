import { BlendModes, OrientationAxis } from '../enums';
import type { FlipDirection, IImageData, IVolumeInput, OrientationVectors, Point2, Point3, VolumeViewportProperties } from '../types';
import type { ViewportInput } from '../types/IViewport';
import type IVolumeViewport from '../types/IVolumeViewport';
import Viewport from './Viewport';
declare abstract class BaseVolumeViewport extends Viewport implements IVolumeViewport {
    useCPURendering: boolean;
    use16BitTexture: boolean;
    private _FrameOfReferenceUID;
    private inverted;
    private VOILUTFunction;
    constructor(props: ViewportInput);
    static get useCustomRenderingPipeline(): boolean;
    protected applyViewOrientation(orientation: OrientationAxis | OrientationVectors): void;
    private initializeVolumeNewImageEventDispatcher;
    protected resetVolumeViewportClippingRange(): void;
    private setVOILUTFunction;
    private setColormap;
    private setOpacity;
    private setInvert;
    private _getOrCreateColorTransferFunction;
    private setVOI;
    setProperties({ voiRange, VOILUTFunction, invert, colormap, preset, }?: VolumeViewportProperties, volumeId?: string, suppressEvents?: boolean): void;
    private setPreset;
    getProperties: () => VolumeViewportProperties;
    setVolumes(volumeInputArray: Array<IVolumeInput>, immediate?: boolean, suppressEvents?: boolean): Promise<void>;
    addVolumes(volumeInputArray: Array<IVolumeInput>, immediate?: boolean, suppressEvents?: boolean): Promise<void>;
    removeVolumeActors(actorUIDs: Array<string>, immediate?: boolean): void;
    setOrientation(orientation: OrientationAxis, immediate?: boolean): void;
    private _getApplicableVolumeActor;
    private _isValidVolumeInputArray;
    getBounds(): number[];
    flip(flipDirection: FlipDirection): void;
    getFrameOfReferenceUID: () => string;
    hasVolumeId(volumeId: string): boolean;
    getImageData(volumeId?: string): IImageData | undefined;
    private _setVolumeActors;
    canvasToWorld: (canvasPos: Point2) => Point3;
    worldToCanvas: (worldPos: Point3) => Point2;
    hasImageURI: (imageURI: string) => boolean;
    protected _getOrientationVectors(orientation: OrientationAxis | OrientationVectors): OrientationVectors;
    getSlabThickness(): number;
    getIntensityFromWorld(point: Point3): number;
    getImageIds: (volumeId?: string) => Array<string>;
    abstract getCurrentImageIdIndex(): number;
    abstract getCurrentImageId(): string;
    abstract setBlendMode(blendMode: BlendModes, filterActorUIDs?: Array<string>, immediate?: boolean): void;
    abstract setSlabThickness(slabThickness: number, filterActorUIDs?: Array<string>): void;
    abstract resetProperties(volumeId?: string): void;
}
export default BaseVolumeViewport;
